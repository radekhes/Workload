{% extends "base.html" %}

{% block css %}
    {{ super() }}
	
	 <link type="text/css" rel="stylesheet" href="/libs/jqueryui/1.12.1/jquery-ui.min.css" />
{% endblock %}

{% block css_style %}
    <style type="text/css">
        td {
  font-size: 20px;
}

        @media (min-width: 2000px) {
.container {
    max-width: 5540px;
}
}



</style>
{% endblock %}

{% block content %}

<!-- <script src="https://code.highcharts.com/modules/exporting.js"></script>-->
<!--                       ADDD THE NEXT LINE BACK !!!!!!!!!!!!!!!!!-->
<!--<script src='/libs/highcharts/8.0.0/code/highcharts.js'></script>-->
<!--<script src='https://cdnjs.cloudflare.com/ajax/libs/highcharts/8.0.4/highcharts.js'></script>-->
<!-- <script src="https://code.highcharts.com/modules/offline-exporting.js"></script>-->
<!--

-->
<!-- TOP NAV BAR >    <-->
<nav class="navbar navbar-default">
  <div class="container-fluid">
    <div class="col-xs-10 col-xs-offset-1">
      <!-- Brand and toggle get grouped for better mobile display -->
      <div class="navbar-header">
        <a class="navbar-brand" >
          ECS Management  
         <span class="important-title">{{ year.number }}</span><br>   <span style="color: red"><b>{% if error %}     ERROR: {% endif %}{{ error }}</b></span>
            <span style="font-size:11px"> Proudly brought to you by </span><i style="font-size:11px">Stuie and the Marshalls: (Gordon, Nathan, Divya, Tana, Jack) ...pythonized by Radek... sorry</i>
         
		</a>
      </div>

      <div class="collapse navbar-collapse" id="navigation-menu">
        <ul class="nav navbar-nav navbar-right">
          <li>
              <a class="icon-link link-info corner-icon" title="" data-toggle="tooltip" data-placement="bottom"  data-original-title="Year">
            <!--  <span class="sr-only" onclick="">Years</span>-->
              <form id="change_year_id" class="form "  action="{{ url_for('.staff_home', _external=True) }}">
                  <select name="year" id="year_select_id" onchange="document.getElementById('change_year_id').submit();"><!---->
                      <option value="{{ year.number }}">{{ year.number }}</option>
                      {% for _year_ in all_years %}
                          {%  if not _year_==year.number %}
                              <option value="{{ _year_ }}">{{ _year_ }}</option>
                          {% endif %}
                      {% endfor %}
                  </select>
                  <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
              </form>
            <!--  <span class="glyphicon glyphicon-calendar" aria-hidden="true"></span>-->
            </a>
          </li>

          <li>
            <a class="icon-link link-info corner-icon" title="" data-toggle="tooltip" data-placement="bottom" href='{{ url_for(".root", _external=True) }}/dbadmin' data-original-title="Settings">
            <span class="sr-only">Admin</span>
            <span class="glyphicon glyphicon-cog" aria-hidden="true"></span>
            </a>
          </li>
        </ul>
      </div>

    </div>
  </div>
</nav>

<!--NAV TABS (TEACHING COURSES)> <-->
<ul class="nav nav-tabs">
  <li class="active" ><a  id="teaching_tab_id"  data-toggle="tab" href="#teaching">Teaching</a></li>
  <li ><a id="courses_tab_id" data-toggle="tab" href="#courses">Courses</a></li>
  <li ><a id="staff_details_tab_id" data-toggle="tab" href="#staff-details">Staff-details</a></li>
  <li ><a id="course_details_tab_id" data-toggle="tab" href="#course-details">Course-details</a></li>

  <li ><a id="model_tab_id" data-toggle="tab" href="#model">Model</a></li>
  <li ><a id="spreadsheet_id" data-toggle="tab" href="#spreadsheet">Spreadsheet</a></li>
  <li ><a id="eventlog_id" data-toggle="tab" href="#eventlog">Event Log</a></li>

  <button type="button" class="btn btn-info btn-sm pull-right" data-toggle="modal" data-target="#helpModal">Help</button>

  <!-- Modal -->
  <div id="helpModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal">Ã—</button>
          <h4 class="modal-title">Quick Help</h4>
        </div>
        <div class="modal-body">
          <h5><b>Filter Teaching Data</b></h5>
          <ul>
            <li>To filter out work groups, such as research, adminstration and trimester allocations, you can click on the Summary graph legend boxes (hovering over the boxes will highlight the selected task).</li>
            <li>To select individual staff, click on the given staff member's bar on the graph. Clicking on multiple bars will allow you to select multiple staff members. This will filter out other data to show only information on selected staff members below. </li>
            <li>To filter out data regarding work load, or discipline, click on the relevant sections on the pie charts below the Summary graph.</li>
          </ul>
          <h5><b>Filter Course Data</b></h5>
          <ul>
            <li>To filter out data regarding level, discipline, work load, or trimester, click on the relevant section on the pie charts.</li>
          </ul>
        </div>
        <div class="modal-footer">
          <p class="pull-left">For more information see the <a target="_blank" href="/admin/">about page</a></p>
          <button type="button" class="btn btn-default pull-right" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>
</ul>

<!-- BAR CHART AND OTHER TABS CONTENT><-->
<div class="tab-content">

<!--TEACHING TAB PANE... -->
<div id="teaching" class="tab-pane fade in active" data-url="/teaching">
    <div class="row">
      <div class="panel panel-default" style="min-width: 1010px; max-width: 1600px; height: 450px; margin: 0">
        <div class="panel-body">
          <div class="col-xs-12 dc-chart" id="total-workload">
            <legend>Summary
              <a class="reset" href="javascript:totalWorkloadBarchart.filterAll();dc.redrawAll()" style="display:none">reset</a>
            </legend>
            <div id="summary_id" style="min-width: 1010px; max-width: 1700px; height: 380px; margin: 0"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="panel panel-default">
        <div class="panel-body">
          <div class="col-xs-12 dc-chart" id="total-workload-distr">
            <legend>Distributions
              <a class="reset"  style="display:none">reset</a>
            </legend>
              <div id="load_id" style="min-width: 310px; max-width: 1200px; height: 385px; margin: 0; width:50% ; float: left"></div>
              <div id="disc_id" style="min-width: 310px; max-width: 1200px; height: 385px; margin: 0; width:50%; float: right"></div>
           </div>
        </div>
      </div>
    </div>

    <!--GRAPH OF ALL STAFF><-->
    <!--LIST OF STAFF AND ASSOCAITED WORKLOAD><-->
    {% for disc in discipline_set %}
    <div class="row"   ><!--style="display: none"-->
      <div class="panel panel-default">
        <div class="panel-body">
          <div class="col-xs-12 dc-chart" >
            <legend>
              Staff
                <span  class="glyphicon glyphicon-stop" style="padding-left: 4em; color: rgb(193, 79, 214);"></span>
                Trimester 1
                <span  class="glyphicon glyphicon-stop" style="padding-left: 1em; color: rgb(60, 217, 73);"></span>
                Trimester 2
                <span  class="glyphicon glyphicon-stop" style="padding-left: 1em; color: rgb(247, 242, 69);"></span>
                Trimester 3
            </legend>
            <div class="dc-grid-top">
               <div class="dc-grid-group">
                       <h1 class="dc-grid-label">{{ disc.name }}</h1>
               </div>

               {% for member in group_workload[disc.name].keys()|list %}

               <div class="dc-grid-item col-xs-4" id="staff_breakdown_{{ member|safe|replace(' ','') }}_id"  >
                   <div class="dc-grid-inner-item container-fluid">
                      <div class="panel panel-default"  style="background-color: #F0EAD6;">
                         <div class="row">
                            <div class="col-xs-8">
                                <h3 class="panel-title dc-datagrid-headings">	
														<strong style="float: left; width:220px; height:50px; font-size:20px">
														{{ member|safe }}
														</strong>
														{% if group_course_set[disc.name][member|safe]['New']=='New' %}<span class="link-info glyphicon glyphicon-alert" title="New" data-toggle="tooltip" data-original-title="New" data-placement="left"></span>{% endif %}
								 <!-- {% if 1 %}
                                       <span class="label label-default new-teacher-false">New</span>
                                  {% endif %}-->
                              </h3>
                            </div>
                            <div class="col-xs-1">
                              <a class="icon-link" onclick="view_staff('{{ member|safe|replace(" ","_") }}','{{ disc.name }}','{{ year.number }}'); $('#staff_details_tab_id').tab('show'); ">  <!--/////////////////////////////////////////////////////////////-->
                                <span class="sr-only">Edit</span>
                                <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                              </a>
                            </div>
                            <div class="col-xs-1">
                              <a class="icon-link" onclick="view_staff('{{ member|safe|replace(" ","_") }}','{{ disc.name }}','{{ year.number}}'); $('#staff_details_tab_id').tab('show'); "><!---->
                                <span class="sr-only">Show</span>
                                <span class="glyphicon glyphicon-eye-open" aria-hidden="true" ></span>
                              </a>
                            </div>
							<div class="col-xs-1">
                             <a class="icon-link">
								   {% for role in role_map.keys()|list %}
							             				{% if role_map[role]==member|safe and role=='HoS' %}
                                                          <span class="link-info glyphicon glyphicon-sunglasses" title="HoS" data-toggle="tooltip" data-original-title="Assignment complete" data-placement="left"></span>
                                                        {% endif %}
														{% if role_map[role]==member|safe  and not role=='HoS'%}
                                                          <span class="link-info glyphicon glyphicon-education" title="{{ role }} Assigned" data-toggle="tooltip" data-original-title="Assignment complete" data-placement="left"></span>
                                                        {% endif %}
								   {% endfor %}
							 </a>
                            </div>
                            
							<br>
                            <br>
                         </div>
                         <!--DISPLAY IMAGES AND WORKLOAD BAR CHARTS... -->
                         <div class="row">
                            <div class="col-xs-12">
                              <div class="row">

                                <div class="col-xs-4">
   
                                  <img class="staff-img" onerror="this.onerror=null; this.src='https://ecs.wgtn.ac.nz/images/nopicture.jpeg'" style="border-radius: 25px;" src='{{ staff_dict[member].image_url}}' width="170" height="170" ><!--"https://ecs.wgtn.ac.nz/foswiki/pub/Main/ChristopherHollitt/ChristopherHollitt.jpg"-->
                                    </div>

                                <div class="col-xs-6" id="data-grid-{{ member|safe|replace(' ','') }}" >
                                    <svg width="200" id="lecture-set-{{ member|safe|replace(' ','_') }}" height="200">
                                    {% set y=[0,25, 50,75, 100,125, 150, 175, 195] %}
                                    {% set y2=[15,40, 65, 90, 115, 140, 165, 187] %}
                                    {% set z=[] %}
                                    {% set z2=[0] %}
                                    {% set x=40 %}

                                    {% set t=0 %}
                                    {% for tri in ['1','2','3']  %}
                                      {% if group_course_set[disc.name][member|safe][tri]|list|length>0 %}
                                           {% for course in group_set[disc.name][member|safe][tri]|list %}
                                                    <rect class="bar " x="{{x}}" y="{{ y[loop.index-1 + z2[z2|length -1 ] ] }}"   width="150" height="20" style="  border-radius: 55px; fill: rgb(128,128,128);">
                                                    </rect>
                                                    <rect class="bar " x="{{x}}" y="{{ y[loop.index-1 + z2[z2|length -1 ] ] }}"   width="{{group_course_set[disc.name][member|safe][tri][loop.index-1] *150}}" height="20" style="fill: rgb({% if tri=='1' %} 193 {% elif tri=='2' %} 60 {% else %} 247 {% endif %}, {% if tri=='1' %} 79 {% elif tri=='2' %} 217 {% else  %} 242 {% endif %} ,{% if tri=='1' %} 214 {% elif tri=='2' %} 73 {% else %} 69 {% endif %});">
                                                    </rect>
                                                    {% do z.append(loop.index-1) %}
                                           {% endfor %}
                                          {% do z2.append( z|length ) %}
                                       {% endif %}
                                    {% endfor %}

                                    {% set z=[] %}
                                    {% set z2=[0] %}
                                    {% for tri in ['1','2','3']  %}
                                        {% if group_course_set[disc.name][member|safe][tri]|list|length>0 %}
                                           {% for course in group_set[disc.name][member|safe][tri]|list %}
                                                   <text class="label"  x="{{x+5}}" y="{{ y2[loop.index-1 +z2[z2|length-1] ] }}" onclick="view_course('{{ course|safe|replace(" ","_") }}','{{ disc.name }}')" font-size="15px" style=" border-radius: 25px;font-weight: bold;">{{ course }} ({{group_course_set[disc.name][member|safe][tri][loop.index-1]}})</text>
                                                     <!--  <text class="label"  font-size="15px" style="x:5 y:{{ y2[loop.index-1 +z2[z2|length-1] ] }} font-weight: bold;">{{ course }}</text>-->
                                                   {% do z.append(loop.index-1) %}
                                           {% endfor %}
                                           {% do z2.append( z|length ) %}
                                        {% endif %}
                                    {% endfor %}
                                    </svg>
                                </div>
                              </div>
                            </div>
                         </div>
                         <div class="row">
                            <div class="col-xs-12">
                              <p>{% if group_course_set[disc.name][member|safe]['New']=='New' %}<span class="link-info glyphicon glyphicon-alert" title="New" data-toggle="tooltip" data-original-title="New" data-placement="left"></span>{% endif %}<br></p>
                            </div>
                         </div>
                       </div>
                   </div>

               </div>

               {% endfor %}
              </div>
          </div>
        </div>
      </div>
    </div>
    {% endfor %}
</div>

<div id="courses" class="tab-pane fade in" data-url="/courses">
    <div class="row">
        <div class="panel panel-default" style="width: 1420px ; max-width: 1600px; height: 400px; margin: 0">
            <div class="panel-body" style="width: 1420px ; max-width: 1600px; margin: 0 " >
              <div class="col-xs-3 dc-chart" id="level-group">
                <legend>Course Level
                  <a class="reset" href="javascript:levelRowChart.filterAll();dc.redrawAll()" style="display:none">reset</a>
                </legend>

                <div id="courses_level_id" style="width: 300px; max-width: 1200px; height: 320px; margin: 0"></div>
              </div>
              <div class="col-xs-3 dc-chart" id="code-group">
                <legend>Subject
                  <a class="reset" href="javascript:codePieChart.filterAll();dc.redrawAll()" style="display:none">reset</a>
                </legend>
              
                <div id="courses_disc_id" style="width: 300px; max-width: 1200px; height: 320px; margin: 0"></div>
              </div>
              <div class="col-xs-3 dc-chart" id="workAllocated-group">
                <legend>Work Allocated
                  <a class="reset" href="javascript:workloadPieChart.filterAll();dc.redrawAll()" style="display:none">reset</a>
                </legend>
                <div id="courses_load_id" style="width: 300px; max-width: 1200px; height: 320px; margin: 0"></div>
              </div>
              <div class="col-xs-3 dc-chart" id="tri-group">
                <legend>Trimester
                  <a class="reset" href="javascript:triPieChart.filterAll();dc.redrawAll()" style="display:none">reset</a>
                </legend>
                <div id="courses_tri_id" style=" width: 300px; max-width: 1200px; height: 320px; margin: 0"></div>
              </div>
           </div>
        </div>

      {% for disc in course_set.keys()|list %}
      <div class="row"   >
          <div class="panel panel-default" >
            <div class="panel-body">
                <div class="col-xs-12 " >
                  <legend>
                    Course Breakdown
                    <span class="glyphicon glyphicon-stop" style="padding-left: 4em; color: rgb(255, 127, 14);"></span>
                    Course Coordinator
                    <span  class="glyphicon glyphicon-stop" style="padding-left: 1em; color: rgb(31, 119, 180);"></span>
                    Lecturer
                  </legend>

                  <div class="dc-grid-top" >
                      <div class="dc-grid-group">
                          <h1 class="dc-grid-label">{{ disc }}</h1>

                         {% for tri in course_set[disc].keys()|list %}

                             {% for lev in course_set[disc][tri].keys()|list %}

                                 {% for course in course_set[disc][tri][lev].keys()|list %}
                                        <div class="dc-grid-item col-xs-4 clearfix" id="course_breakdown_{{ disc }}-{{ course }}-{{ tri }}_id" style="Display: block">
                                          <div class="panel panel-default">
                                            <div class="dc-grid-inner-item container-fluid" style="background-color: #F0EAD6;">
                                              <div class="row">
                                                <div class="col-xs-9">
                                                  <h3 class="panel-title dc-datagrid-headings">
                                                    {% if course_group_course_set[disc][tri][lev][course]['coord']=='None' %}
                                                      <span class="link-info need-coordinator-true glyphicon glyphicon-alert" title="Needs Coordinator" data-toggle="tooltip" data-original-title="Needs Coordinator" data-placement="right"></span>
                                                    {% endif %}
                                                    {% if course_group_course_set[disc][tri][lev][course]['sum']<0.99 %}
                                                       <span class="link-info need-coordinator-true glyphicon glyphicon-alert" title="Course Incompletly Assigned" data-toggle="tooltip" data-original-title="Course Assignment Incomplete" data-placement="left"></span>
                                                    {% endif %}
													
													<!--{% set break=false %}
														{% for role in role_set[disc][tri][lev].keys()|list %}
														   {% if role!='Total'%}
																	{% if role_map[role]=='None' %}
																	  <span class="link-info glyphicon glyphicon-education" title="{{ role }} not Assigned" data-toggle="tooltip" data-original-title="No Assignment" data-placement="left"></span>
																	{% endif %}
																	{% set break=true %}
														   {% endif %}
														{% endfor %}
													{%if break==false%}	-->
														{% for role in role_set[disc]['F'][lev].keys()|list %}
														   {% if role!='Total'%}
																	{% if role_map[role]=='None' %}
																	  <span class="link-info glyphicon glyphicon-education" title="{{ role }} not Assigned" data-toggle="tooltip" data-original-title="No Assignment" data-placement="left"></span>
																	{% endif %}
														   {% endif %}
														{% endfor %}
            									   <!-- {% endif %}-->
													
                                                  </h3>
                                                </div>
                                                <div class="col-xs-1">
                                                  <a class="icon-link" onclick="view_course('{{ course}}','{{ tri }}','{{ disc }}');  $('#course_details_tab_id').tab('show');">
                                                    <span class="sr-only">Edit</span>
                                                    <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                                                  </a>
                                                </div>
                                                <div class="col-xs-1">
                                                  <a class="icon-link" onclick="view_course('{{ course}}','{{ tri }}','{{ disc }}');  $('#course_details_tab_id').tab('show'); ">
                                                    <span class="sr-only">Show</span>
                                                    <span class="glyphicon glyphicon-eye-open" aria-hidden="true"></span>
                                                  </a>
                                                </div>
                                              </div>
                                              <div class="dc-datagrid-headings">
                                                  <h4><strong>{{ course }}:</strong></h4>
                                                    <h5>{{ course_set[disc][tri][lev][course]['title'] | truncate(22,True)  }}</h5>
                                                    <p>
                                                    Expecting {{ course_group_course_set[disc][tri][lev][course]['students'] }} students</p>
                                              </div>

                                              <div class="col-xs-8" id="data-grid-{{ course }}" style="min-width: 110px; max-width: 400px; height: 180px; margin: 0; width:32% ; float: left" >
                                                     <svg x=0 width="400" height="150"  id="course-set-{{course}}-id">
                                                         {% set y=[0,40, 80,120, 160] %}
                                                         {% for member in course_set[disc][tri][lev][course]['lect'].keys()|list %}
                                                             <rect class="bar " x="0" y="{{ y[loop.index-1] }}" width="150" height="30" style=" border-radius: 25px;fill: rgb(128,128,128) ;">
                                                            </rect>
                                                            <rect class="bar " x="0" y="{{ y[loop.index-1] }}" width="{{course_set[disc][tri][lev][course]['lect'][member|safe]*150}}" height="30" style=" border-radius: 25px;fill: rgb({% if tri=='1' %} 193 {% elif tri=='2' %} 60 {% else %} 247 {% endif %}, {% if tri=='1' %} 79 {% elif tri=='2' %} 217 {% else  %} 242 {% endif %} ,{% if tri=='1' %} 214 {% elif tri=='2' %} 73 {% else %} 69 {% endif %});">
                                                            </rect><text x="5" y="{{ y[loop.index-1]+20 }}" onclick="view_staff('{{ member|safe|replace(' ','_') }}','{{ disc|safe }}','{{ year.number|safe }}' )">{{ member }} ({{course_set[disc][tri][lev][course]['lect'][member|safe]}})</text>
                                                         {% endfor %}

                                                         {% if course_set[disc][tri][lev][course]['coord']%}
                                                            <text x="185" y="15" onclick="view_staff('{{ course_set[disc][tri][lev][course]["coord"] |safe|replace(' ','_') }}','{{ disc }}', '{{ year.number }}')">Coord: {{ course_set[disc][tri][lev][course]['coord'] }}</text>
                                                         {% else %}
                                                              <text x="185" y="15" href="">Coord: TBA</text>
                                                         {% endif %}
                                                         {% set z=[] %}
                                                     </svg>
                                              </div>
                                             </div>
                                            </div>
                                        </div>
                                 {% endfor %}
								 
                             {% endfor %}
                         {% endfor %}
                      <p></p>
                      </div>
                  </div>
                </div>
            </div>
          </div>
      </div>
      {% endfor %}
    </div>
</div>

<!--
Reserved for staff and course detail
-->
<div id="staff-details" class="tab-pane fade in" data-url="/staff-details" style="display:none">
    <div class="row">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="dc-grid-top">
                        <div class="dc-grid-group">
                            <h1 id="staff-inner_id" class="dc-grid-label">                            </h1>
                                <!--<p>-->
                                 <img id="view_staff_image_id" onerror='this.onerror=null; this.src="https://ecs.wgtn.ac.nz/images/nopicture.jpeg"' class="staff-img" width="250" height="250" style="float: left; margin-right: 50px">
                                    <br>

                                    <svg width="300" class="pull-left" id="lecture-set_id" height="200" > </svg>
                                    <svg width="300" class="pull-right"  id="research-set_id" height="200" >
                                    <rect class="bar" style="float: left;  fill: rgb(128, 128, 128);"  height="30" width="200" y="55"></rect>
                                    <rect class="bar" style="float: left; fill: rgb(128, 128, 128);" height="30" width="200" y="0"></rect>
                                    <rect class="bar" style="float: left; fill: rgb(128, 128, 128);" height="30" width="200" y="0"></rect>

                                    <rect class="bar" style="fill: #3e98ff;" y="55" width="100" height="30"></rect>
                                    <rect class="bar"  style="fill: #ff7f0e;" width="10" height="30"></rect>

                                    <text x="5" y="79" width="10" height="30" font-size="15px" class="label">Research</text>
                                    <text x="5" y="25" width="10" height="30" font-size="15px" class="label">Admin</text>
                                     </svg>
                                    <br><br><br><br><br><br><br><br><p><p><p><hr>

									<table width="75%" class="table table-bordered">
                                    	<tr >
											<th> <strong style="font-size: 20px;title: Currently assigned teaching load / Expected teaching load.   width: 8em; min-width: 8em;max-width: 8em;">Teaching load(%):</strong></th>
											<td id="Total_work_id"></td>
										</tr>
                                        <tr >
											<th> <strong style="font-size: 20px;">Residual Hours(h):</strong></th>
											<td id="Residual_id"></td>
										</tr>
                                        <tr>
											<th><strong style="font-size: 20px;">Roles:</strong></th>
											<td id="Role_id"></td>
										</tr>
                                        <tr>
											<th><strong style="font-size: 20px;">Full Time Equivalent:</strong></th>
											<td id="FTE_id"></td>
										</tr>
										<tr>
											<th><strong style="font-size: 20px;">Leave:</strong></th>
											<td id="Leave_id"></td>
										</tr>
										<tr>
											<th><strong style="font-size: 20px;">Buyout:</strong></th>
											<td id="Buyout_id"></td>
										</tr>
                                        <tr>
											<th><strong style="font-size: 20px;" title="(=FTE - Leave - Buyout)">Effective FTE(%):</strong><br></th>
											<td id="Eff_FTE_id"></td>
										</tr>
                                        <tr>
											<th><strong style="font-size: 20px;"  title="(=Total Teaching Work(%FTE) - Admin(%FTE) -Research(%FTE))">Expected Teaching(%)(h):</strong><br></th>
											<td id="Exp_TH_id"></td>
										</tr>
                                       	<tr>
											<th><strong style="font-size: 20px;" title="">Assigned Teaching(H):</strong> <br></th>
											<td id="Total_id"></td>
										</tr>
										<tr>								
											<th><strong style="font-size: 20px;">Research (%)(h):</strong></th>
											<td id="Research_staff_id"></td>
										</tr>
										<tr>								
											<th><strong style="font-size: 20px;">Administration (%)(h):</strong></th>
											<td id="Administration_staff_id"></td>
										</tr>
                                        <tr>
											<th><strong style="font-size: 20px;">Lab Hours:</strong></th>
											<td id="Lab_hours_staff_id"></td>
										</tr>
                                        <tr>
											<th><strong style="font-size: 20px;">Assigned Teaching(Custom):</strong></th>
											<td id="Model_work_staff_id"></td>
										</tr>
                                        <tr>
                                            <th><strong style="font-size: 20px;">Notes:</strong></th>
											<td  id="Notes_id"></td>
										</tr>
                                    </table>
                            <br><hr><hr>
                            <label  style="font-size:20px">Add Assignment</label>

                            <form class="form"  action='{{ url_for(".admin_assign_course_staff", _external=True) }}'>
                                <div class="form-row">
                                    <div class="col-sm-3">
                                     <label class="form-label" for="view_staff_assign_select_id" style="font-size:20px">Assign to Course</label>
                                    </div>
                                    <div class="col-sm-2">
                                     <label class="form-label" for="view_staff_assign_range_id" style="font-size:20px">Workload</label>
                                    </div>
                                    <div class="col-sm-2">
                                     <label class="form-label" for="view_staff_assign_cb_id" style="font-size:20px">Coordinator</label>
                                    </div>
                                    <div class="col-sm-2">
                                     <label class="form-label" for="view_staff_assign_lh_id" style="font-size:20px">Lab Hours</label>
                                    </div>
                                    <div class="col-sm-3">
                                     <label class="form-label" for="view_staff_assign_id" style="font-size:20px">Submit</label>
                                    </div>
                                </div>
                                  <div class="form-row">
                                    <div class="form-group">
                                        <!--<label class="form-label" for="view_staff_assign_select_id" style="font-size:20px">Assign to Course</label>-->
                                        <div class="col-sm-3">
                                           <select required name="course_name" id="view_staff_assign_select_id" class="form-control" style="float: left; height: 50px; width: 220px; font-size:20px">
                                           </select>
                                       </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                           <input required name="workload" type="number" id="view_staff_assign_range_id" class="form-control" min="1" max="100" style="width:220px; height:50px;">

                                       </div>
                                    </div>
                                    <div class="form-group">

                                        <div class="col-sm-2">
                                            <input name="coord" id="view_staff_assign_cb_id" type="checkbox" class="form-control" style="width:220px; height:50px;" >
                                         </div>
                                    </div>
                                        <div class="form-group">
                                        <div class="col-sm-2">
                                          <input name="lab_hours" type="number" id="view_staff_assign_lh_id" required min="0" max="20" class="form-control" style="width:220px; height:50px;" >
                                        </div>
                                    </div>
                                    <div class="form-group">
                                       <div class="col-sm-3">
                                               <input type="submit" class="form-control" id="view_staff_assign_id" value="Assign Staff" style="float: left; height: 50px; width: 220px; font-size:20px">
                                       </div>
                                    </div>
                                  </div>

                                <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                <input type="hidden" name="year" id="view_staff_assign_year_id" value="{{ year.number }}">
                                <input type="hidden" name="staff_name" id="view_staff_assign_staff_name_id" value=''>
                            </form>
                            <br><p></p><br><hr><hr>

                            <label  style="font-size:20px">Edit Assignment</label>
                            <form action='{{ url_for(".admin_edit_course_staff", _external=True) }}' class=" form" id="edit_staff_form_id">
                                 <div class="form-row">
                                    <div class="col-sm-3">
                                     <label class="form-label" for="view_staff_assign_select_id" style="font-size:20px">Assign to Course</label>
                                    </div>
                                    <div class="col-sm-2">
                                     <label class="form-label" for="view_staff_assign_range_id" style="font-size:20px">Workload</label>
                                    </div>
                                    <div class="col-sm-2">
                                     <label class="form-label" for="view_staff_assign_cb_id" style="font-size:20px" >Coordinator</label>
                                    </div>
                                    <div class="col-sm-2">
                                     <label class="form-label" for="view_staff_assign_lh_id" style="font-size:20px">Lab Hours</label>
                                    </div>

                                    <div class="col-sm-3">
                                     <label class="form-label" for="view_staff_assign_id" style="font-size:20px">Submit</label>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                     <!--   <label class="form-label "  style="font-size:20px">Edit</label>-->
                                        <div class="col-sm-3">
                                           <select  name="course_name" required id="view_staff_edit_select_id" class="form-control" style="float: left; height: 50px; width: 220px; font-size:20px">
                                            <option>Research</option>
                                            <option>Admin</option>
                                           </select>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-sm-2">
                                           <input name="workload" type="number" id="view_staff_edit_range_id" required min="0" max="1" step=".01" class="form-control" style="width:220px; height:50px;">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                          <input name="coord" type="checkbox" id="view_staff_edit_cb_id" style="width:220px; height:50px;"  class="form-control">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                          <input name="lab_hours" type="number" id="view_staff_edit_lh_id"  required min="0" max="20" class="form-control" style="width:220px; height:50px;">
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-sm-3">
                                          <input type="submit" id="edit_button_id"  class="form-control" value="Edit existing" style="float: left; height: 50px; width: 220px; font-size:20px">
                                        </div>
                                    </div>
                                </div>
                                <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                <input type="hidden" name="year" id="view_staff_edit_year_id" value="{{ year.number }}">
                                <input type="hidden" name="staff_name" id="view_staff_edit_staff_name_id" value="">
                             </form>
                             <br><p></p><br><hr><hr>  
							<label  style="font-size:20px;">Edit Details</label>
                             <form action="{{ url_for('.admin_edit_course_staff_details', _external=True) }}" class=" form" id="edit_course_staff_details_form_id">
                                <div class="form-row">
                                    <div class="col-sm-6">
                                     <label class="form-label" for="edit_course_staff_details_notes_id" style="font-size:20px; ">Notes</label>
                                    </div>
                                    <div class="col-sm-3">
                                     <label class="form-label" for="edit_course_staff_details_buyout_id" style="font-size:20px">Buyout</label>
                                    </div>
									<div class="col-sm-3">
                                     <label class="form-label" for="edit_course_staff_details_FTE_id" style="font-size:20px">FTE</label>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                     <!--   <label class="form-label "  style="font-size:20px">Edit</label>-->
                                        <div class="col-sm-6">
                                            <input name="notes" type="text" id="edit_course_staff_details_notes_id" class="form-control" style="width:570px; height:50px;">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-3">
                                           <input name="buyout" type="number" id="edit_course_staff_details_buyout_id"  min="0" max="1" step=".01"class="form-control" style="float: left; width:220px; height:50px;">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-3">
                                           <input name="fte" type="number" id="edit_course_staff_details_FTE_id"  min="0" max="1" step=".01" class="form-control" style="float: left; width:220px; height:50px;">
                                        </div>
                                    </div>
								</div>
								<div class="form-row">
									<div class="col-sm-6">
                                     <label class="form-label" for="edit_course_staff_details_role_id" style="font-size:20px">Role</label>
                                    </div>							
									<div class="col-sm-3">
                                     <label class="form-label" for="edit_course_staff_details_leave_id" style="font-size:20px">Leave</label>
                                    </div>
                                    <div class="col-sm-3">
                                     <label class="form-label" for="edit_course_staff_details_form_id" style="font-size:20px">Submit</label>
                                    </div>
								</div>
                                <div class="form-row">
								    <div class="form-group">
                                        <div class="col-sm-6">
                                           <select id="edit_course_staff_details_role_id" name="role" class="form-control" style="float: left; height: 50px; width: 220px; font-size:20px">
												<option>None</option>			  							   
												{% for role_i in role_map.keys()| list %}
													{% if role_i !='Total' %}
														<option>{{role_i}}</option>
													{%endif%}
												{% endfor %}													
                                           </select>  
                                        </div>
                                    </div>
									
									<div class="form-group">
                                        <div class="col-sm-3">
                                           <input name="leave" type="number" id="edit_course_staff_details_leave_id"  min="0" max="1" step=".01" class="form-control" style="float: left; width:220px; height:50px;">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-3">
                                          <input type="submit" id="edit_course_staff_details_button_id"  class="form-control" value="Edit existing" style=" height: 50px; width: 220px;">
                                        </div>
                                    </div>
                                </div>
                                <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                <input type="hidden" name="year" id="view_staff_edit_course_staff_details_year_id" value="{{ year.number }}">
                                <input type="hidden" name="staff_name" id="view_staff_edit_course_staff_details_name_id" value="">
                             </form>


                             <br><p></p><hr><hr><p><br>

                             <label style="float: left margin-top: 20px ;font-size:20px">Remove Assignment</label>

                             <form action="{{ url_for('.admin_del_course_staff', _external=True) }}" class="form ">
                               <div class="form-row">
                                    <div class="col-sm-6">
                                        <label class="form-label" style="font-size:20px">Delete</label>
                                    </div>
                                    <div class="col-sm-6">
                                         <label class="form-label" style="font-size:20px; ">Submit</label>
                                    </div>
                               </div>
                               <div class="form-row">
                                    <div class="form-group">
                                            <div class="col-sm-6">
                                                <select name="course_name" id="view_staff_del_select_id" required class="form-control" style=" height: 50px; width: 220px; font-size:20px">
                                                    <option>Research</option>
                                                    <option>Admin</option>
                                                </select>
                                            </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-6">
                                           <input type="submit" class="form-control" value="Remove Course" style=" height: 50px; width: 220px; font-size:20px">
                                        </div>
                                    </div>
                               </div>
                                    <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                    <input type="hidden" id="view_staff_del_year_id" name="year" value="{{ year.number }}">
                                    <input type="hidden" id="view_staff_del_staff_name_id" name="staff_name" value="">

                             </form>
                        </div>
                    </div>
                </div>
            </div>
    </div>
</div>
<div id="course-details" class="tab-pane fade in" data-url="/course-details" style="display:none">
  <div class="row">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="dc-grid-top">
                        <div class="dc-grid-group">
                            <div id="course-inner_id" class="dc-grid-label">
							   <br>
							   <h2 id="Code_id" align="left" ></h2>			
							   <h3 id="Title_id" align="left" >Title:                   </h3>
																	   
							    <div class="container">
								   <div class="row">
								    <div class="col">  
										<svg width="500" class="pull-left clearfix" id="course_lecturer-set_id" height="300" > </svg>
									</div>
								    <div class="col">  
												<table align="center">
													<tr>								
														<th>Trimester</th>
														<td id="cd_tri_id"></td>
													</tr>
													<tr>								
														<th>Expected Students</th>
														<td id="cd_exp_stud_id"></td>
													</tr>
													<tr>								
														<th>Status</th>
														<td id="cd_status_id"></td>
													</tr>
													
													<!--<tr>
														<th>Notes</th>
														<td id="cd_notes_id"></td>
													</tr>-->
													<tr>								
														<th>Student Factor</th>
														<td id="cd_stud_fact_id"></td>
													</tr>
													<tr>								
														<th>Coordinator</th>
														<td id="cd_coord_id"  ></td>
													</tr>
													<tr>								
														<th>Workload Assigned</th>
														<td id="cd_ass_id"></td>
													</tr>
													<tr>								
														<th>Lecture Duration</th>
														<td id="cd_dur_id"></td>
													</tr>
													<tr>								
														<th>Lectures per Week</th>
														<td id="cd_num_lect_id"></td>
													</tr>
													<tr>								
														<th>Lab hours</th>
														<td id="cd_lab_hours_id"></td>
													</tr>
													
													<tr>								
														<th>Total Lab hours</th>
														<td id="cd_total_lab_hours_id"></td>
													</tr>
												</table>
									</div>
								   </div>
								</div>
								<br><hr>
                            <label  style="font-size:20px">Add Staff to course</label>
							<br>
                            <form class="form"  method="POST" action="{{ url_for('.admin_assign_course', _external=True) }}">
                                <div class="form-row">
                                    <div class="col-sm-3">
                                        <label class="form-label" for="view_course_assign_select_id" style="font-size:20px">Staff</label>
                                    </div>
                                    <div class="col-sm-2">
                                        <label class="form-label" for="view_course_assign_range_id" style="font-size:20px">Workload</label>
                                    </div>
                                    <div class="col-sm-2">
                                        <label class="form-label" for="view_course_assign_cb_id" style="font-size:20px">Coordinator</label>
                                    </div>
                                    <div class="col-sm-5">
                                       <label class="form-label" for="view_course_assign_lh_id" style="font-size:20px">Lab Hours</label>
                                    </div>
                                    <!--<div class="col-sm-3">
                                        <label class="form-label" for="assign_button_id" style="font-size:20px">Submit</label>
                                    </div>-->
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <div class="col-sm-3">
                                           <select required id="view_course_assign_select_id" name="staff_name" class="form-control" style="float: left; height: 50px; width: 220px; font-size:20px">
                                           </select>
                                       </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                           <input required type="number" name="workload" id="view_course_assign_range_id" class="form-control" min="0" max="1" step=".01" style="width:220px; height:50px;">
                                       </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                            <input id="view_course_assign_cb_id" name="coord" type="checkbox" class="form-control">
                                         </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                            <input id="view_course_assign_lh_id" name="lab_hours" type="number" class="form-control" min="0" max="20" style="width:220px; height:50px;">
                                         </div>
                                    </div>

                                    <div class="form-group">
                                       <div class="col-sm-3">
                                               <input type="submit" class="form-control" id="assign_button_id" value="Assign Staff" style="float: right; height: 50px; width: 220px; font-size:20px">
                                       </div>
                                    </div>
                                </div>
                                <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                <input type="hidden" id="view_course_add_year_id" name="year" value="{{ year.number }}">
                                <input type="hidden" id="view_course_add_course_name_id" name="course_name" value="">
                            </form>
                            <br><br><hr>
							<label  style="font-size:20px">Edit course</label>
                            <form method="POST" action="{{ url_for('.admin_edit_course', _external=True) }}" class=" form" id="edit_form_id">
                                <div class="form-row">
                                    <div class="col-sm-3">
                                        <label class="form-label "  style="font-size:20px">Edit</label>
                                    </div>
                                    <div class="col-sm-2">
                                        <label class="form-label "  style="font-size:20px">Workload</label>
                                    </div>
                                    <div class="col-sm-2">
                                        <label class="form-label "  style="font-size:20px">Coordinator</label>
                                    </div>
                                    <div class="col-sm-5">
                                        <label class="form-label "  style="font-size:20px">Lab Hours</label>
                                    </div>
                               <!--     <div class="col-sm-3">
                                        <label class="form-label" for="course_edit_button_id" style="font-size:20px">Submit</label>
                                    </div>-->
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                        <div class="col-sm-3">
                                           <select  name="staff_name" required id="view_course_edit_select_id" class="form-control" style="float: left; height: 50px; width: 220px; font-size:20px">
                                           </select>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                           <input name="workload" type="number" id="view_course_edit_range_id"  required min="0" max="1" step=".01" class="form-control" style="width:220px; height:50px;">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                          <input name="coord" type="checkbox" id="view_course_edit_cb_id" class="form-control">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                            <input id="view_course_edit_lh_id" name="lab_hours" type="number" class="form-control" min="0" max="20" style="width:220px; height:50px;">
                                         </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-3">
                                          <input type="submit" id="course_edit_button_id"  class="form-control" value="Edit existing" style="float: right; height: 50px; width: 220px; font-size:20px">
                                        </div>
                                    </div>
                                </div>

                                <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                <input type="hidden"  id="view_course_edit_year_id" name="year" value="{{ year.number }}">
                                <input type="hidden" id="view_course_edit_course_name_id" name="course_name" value="">
                             </form>
                            <br><p></p><br><hr>

                            <form action="{{ url_for('.admin_edit_course_details', _external=True) }}" class=" form" id="edit_course_details_form_id">
                                 <div class="form-row">
                                    <div class="col-sm-4">
                                     <label class="form-label" for="edit_course_details_notes_id" style="font-size:20px">Notes</label>
                                    </div>
                                    <div class="col-sm-2">
                                     <label class="form-label" for="status_select_id" style="font-size:20px">Status</label>
                                    </div>
                                    <div class="col-sm-2">
                                     <label class="form-label" for="edit_course_details_es_id" style="font-size:20px">Expected Students</label>
                                    </div>
                                    <div class="col-sm-2">
                                     <label class="form-label" for="edit_course_details_sf_id" style="font-size:20px">Student Factor</label>
                                    </div>
									
                                    <!--<div class="col-sm-2">
                                     <label class="form-label" for="edit_course_details_form_id" style="font-size:20px">Submit</label>
                                    </div>-->
                                </div>
                                <div class="form-row">
                                    <div class="form-group">
                                     <!--   <label class="form-label "  style="font-size:20px">Edit</label>-->
                                        <div class="col-sm-4">
                                            <input name="notes" type="textarea" rows="3" id="edit_course_details_notes_id" class="form-control" style="width:420px; height:50px;">
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
										      <select name="status_drop_down"   id="status_select_id" required class="form-control" style="width:200px; height:50px;">   <!--ON Hover tool tip...-->
														 <option value="1">Existing</option>
														 <option value="2">Revised</option>
                                                         <option value="3">New</option>
											  </select>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-2">
                                           <input name="expected_students" type="number" id="edit_course_details_es_id" min="0" max="1000" class="form-control" style="width:200px; height:50px;">
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-sm-2">
                                           <input name="student_factor" type="number" id="edit_course_details_sf_id" min="0" max="100" class="form-control" style="width:200px; height:50px;">
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-sm-2">
                                          <input type="submit" id="edit_course_details_sub_id"  class="form-control" value="Edit existing" style="float: left; height: 50px; width: 200px; font-size:20px">
                                        </div>
                                    </div>
                                </div>
                                <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                <input type="hidden" name="year" id="view_staff_edit_course_staff_details_year_id2" value="{{ year.number }}">
                                <input type="hidden" name="course_name" id="view_staff_edit_course_details_name_id" value="">
                             </form>

                            <br><p></p><br><hr><hr>

                            <label  style="font-size:20px">Delete course</label>
                            <form method="POST" action="{{ url_for('.admin_del_course', _external=True) }}" class=" form ">

                                <div class="form-row">
                                    <div class="col-sm-12">
                                        <label class="form-label " >Delete</label>
                                    </div>
                                    <!--<div class="col-sm-">
                                        <label class="form-label " >Submit</label>
                                    </div>-->
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <div class="col-sm-8">
                                        <select name="staff_name" id="view_course_del_select_id" required class="form-control" style="height: 50px; width: 200px; font-size:20px">
                                        </select>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-sm-4">
                                           <input type="submit" class="form-control" value="Remove Course" style="height: 50px; width: 200px; font-size:20px;">
                                        </div>
                                   </div>
                                </div>
                                <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                <input type="hidden" id="view_course_del_year_id" name="year" value="{{ year.number }}">
                                <input type="hidden" id="view_course_del_course_name_id" name="course_name" value="">
                            </form>
                           </div>
					   </div>
                    </div>
                </div>
            </div>
    </div>
</div>
<div id="model" class="tab-pane fade in" data-url="/model" >
      <div class="row">
           <!-- <div class="panel">-->
                <div class=" panel panel-default">
                    <div class="panel-body">
           <!--             <div class="dc-grid-top">
                            <div class="dc-grid-group">-->
                                <div id="model-inner_id" class="dc-grid-label">
                                    <div class="col-xs-12 " id="total-model">
                                      <p>
                                        <br>
										<table style="width:100%">
										   <tr>
										    	<h2  align="left" ><b>Workload Calculation</b> </h2><p></p><br><br>

										      <td style="vertical-align: top;">
												<h2  name='table_model_sets' align="left">Model Sets:</h2>
                                                 <ul>
												 {% for mod_e_i in model_map.keys()|list %}
                                                    <li>
													     <span id='{{mod_e_i}}_id' class='clickable_text' name='{{ mod_e_i }}' style="color:blue; font-size:25px; "  onclick="change_model_set_fcn('{{mod_e_i}}')" align="left" >{{ mod_e_i }}</span>
												    </li>
													
                                                 {% endfor %}
                                                 </ul>
                                              </td>
                                              <td style="vertical-align: top;">
													<h2 id='table_model_set_id' name='table_model' align="right">Models: </h2>
													<table style="width:750px" id="table_model_set_description_id" align="right">
														   <tr style="width:500px">
															   <th>  <h5 align="left" style="font-size:20px; "><b>Model Title        </b></h5> </th>
															   <th>  <h5 align="left" style="font-size:20px; "><b>Model Equation     </b></h5> </th>
															   <th>  <h5 align="left" style="font-size:20px; "><b>Model Applicability     </b></h5> </th>
														   </tr>
														   {% for mod_e_i in model_map.keys()|list %}
														   <tr style="width:50%" id='table_description_id'>
														        	{% for mod_d in model_description[mod_e_i][model_map[mod_e_i]]   %}
																	{{model_description[mod_e_i][model_map[mod_e_i]]}}
                                                                        <td style="font-size:25px; "  onclick="change_model_fcn('{{mod_e_i}}')">  {{ model_map[mod_e_i] }} </td>
                                                                        <td> {{ mod_d[0] }}</td>
																		<td></td>
																	{% endfor %}
														   </tr>
														   {% endfor %}														   
													</table>												
											   </td>
											</tr>
										</table>
                                        <br><p></p><br><hr><hr>
										
                                        <h2 id="model_title_model_id" align="left" ><b>Workload Calculation Model: </b> </h2><p></p><br><br>
                                        <h3 id="model_current_id" align="center" >    <b> </b> </h3><p></p>
										<h3 id="model_type_id" align="center" >    <b>   </b> </h3><p></p>
                                        <h3 id="model_low_thresh_id" align="left" >    <b> Low Thresh:</b> </h3><p></p>
                                        <h3 id="model_hi_thresh_id" align="left" >    <b> Hi Thresh:  </b> </h3><p></p><br><br>
                                        <p></p>
                                        <table>
                                          <tr>
                                            <td width="600px">
                                                <h5 id="model_course_level_id" align="left">Course Level:     <i>C_Lev</i></h5>
                                                <h5 id="model_lab_hours_id" align="left" >Lab Hours:     <i>C_Lab_Hours</i></h5>
                                                <h5 id="model_student_factor_id" align="left" >Student Factor:     <i>C_Stud_Fact</i></h5>
                                                <h5 id="model_exp_students_id" align="left" >Expected Students:    <i>C_Exp_Stud</i>               </h5>
                                                <h5 id="model_num_courses_id" align="left" title="3=new, 2=revised, 1=existing" data-toggle="tooltip">Status:       <i>C_Status</i></h5>
                                                <h5 id="model_course_id" align="left" title="150 (Seems a lot!)" data-toggle="tooltip">Course Hours :       <i>Course_Hours</i></h5>
                                                 </td>
                                                 <td width="600px">
                                                <h5 id="model_staff_lab_hours_id" align="left" >Staff Lab Hours:     <i>S_Lab_Hours</i></h5>
                                                <h5 id="model_buyout_id" align="left" >Buyout:               <i>S_Buy</i>   </h5>
                                                <h5 id="model_FTE_id" align="left" >Full Time Equivalent:   <i>S_FTE</i>               </h5>
                                                <h5 id="model_new_staff_id" align="left" >New Staff Member:       <i>S_New</i>           </h5>
                                                <h5 id="model_staff_admin_id" align="left" >   Staff Admin:  <i> S_Admin</i></h5>
                                                <h5 id="model_Research_id" align="left">    Research:  <i>    S_Research</i></h5>
                                            </td>
                                          </tr>
                                        </table>
                                     <!--   <div class="container">
                                          <div class="row">
                                            <div class="col">
                                                <h5 id="model_course_level_id" align="left">Course Level:     <i>C_Lev</i></h5>
                                                <h5 id="model_lab_hours_id" align="left" >Lab Hours:     <i>C_Lab_Hours</i></h5>
                                                <h5 id="model_student_factor_id" align="left" >Student Factor:     <i>C_Stud_Fact</i></h5>
                                                <h5 id="model_exp_students_id" align="left" >Expected Students:    <i>C_Exp_Stud</i>               </h5>
                                                <h5 id="model_num_courses_id" align="left" title="3=new, 2=revised, 1=existing" data-toggle="tooltip">Status:       <i>C_Status</i></h5>
                                                <h5 id="model_course_id" align="left" title="150 (Seems a lot!)" data-toggle="tooltip">Course Hours :       <i>Course_Hours</i></h5>
                                             </div>
                                             <div class="col">
                                                <h5 id="model_staff_lab_hours_id" align="left" >Staff Lab Hours:     <i>S_Lab_Hours</i></h5>
                                                <h5 id="model_buyout_id" align="left" >Buyout:               <i>S_Buy</i>   </h5>
                                                <h5 id="model_FTE_id" align="left" >Full Time Equivalent:   <i>S_FTE</i>               </h5>
                                                <h5 id="model_new_staff_id" align="left" >New Staff Member:       <i>S_New</i>           </h5>
                                                <h5 id="model_staff_admin_id" align="left" >   Staff Admin:  <i> S_Admin</i></h5>
                                                <h5 id="model_Research_id" align="left">    Research:  <i>    S_Research</i></h5>
                                            </div>
                                          </div>
                                        </div>-->


                                        <p></p>
									
                                        <br><p></p><br><hr><hr>
                                    </div>

                                    <form class="form" method="POST" action='{{ url_for(".admin_change_model", _external=True) }}'>
									 <br><p></p><br><hr><hr>
									 <h2 id="model_title_2_id" align="left" ><b>Add/Edit/Delete Model</b> </h2><p></p><br><br>
									    <div class="form-row">
                                            <div class="col-sm-4">
                                                <label class="form-label " style="font-size:20px">Operation</label>
                                            </div>
										    <div class="col-sm-4">
                                                <label class="form-label " style="font-size:20px">Model Set Name</label>
                                            </div>
                                            <div class="col-sm-4">
                                                <label class="form-label " style="font-size:20px">Model Name</label>
                                            </div>
										</div>
                                        <div class="form-row">
											<div class="form-group">
												  <div class="col-sm-4">
													 <select name="drop_down" onchange="operation_change_fcn();"  id="operation_select_id" required class="form-control" >   <!--ON Hover tool tip...-->
														 <option value="Add_Model_Set">Add Model Set</option>
														 <option value="Del_Model_Set">Delete Model Set</option>
														 <option value="Add_Model">Add Model</option>
														 <option value="Edit_Model">Edit Model</option>
														 <option value="Del_Model">Delete Model</option>
													 </select>
												  </div>
											</div>
											<div class="form-group">
												<div class="col-sm-4">
													 <input class="form-control" type="text" name="model_set_name" required id="model_set_name_text_id">
												</div>
											</div>
											<div class="form-group">
												<div class="col-sm-4">
													 <input class="form-control" type="text" name="model_name" disabled id="model_name_text_id">
												</div>
											</div>
										</div>
										<div class="form-row">
					                        <div class="col-sm-8">
                                                <label class="form-label " id="model_eqn_id" style="font-size:20px">Equation</label>
                                            </div>
											<div class="col-sm-2">
                                                <label class="form-label "  style="font-size:20px">Lower Bound</label>
                                            </div>
                                            <div class="col-sm-2">
                                                <label class="form-label " id="model_hi_bound_id" style="font-size:20px">Upper Bound</label>
                                            </div>
											
                                        </div>
                                        <p></p>
									    <div class="form-row">
                                                <div class="form-group">
                                                    <div class="col-sm-8">
                                                         <input class="form-control push-right" type="text" name="model" disabled id="model_equation_text_id" >
                                                    </div>
                                                </div>
											    <div class="form-group">
                                                    <div class="col-sm-2">
                                                         <input class="form-control" type="number" id="low_bound_edit_id"  name="low_bound" min="1" required>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                      <div class="col-sm-2">
                                                         <input class="form-control" type="number" min="1" id="hi_bound_edit_id" required name="hi_bound" >
                                                      </div>
                                                </div>
                                        </div>
                                        <div class="form-row">
                                            <div class="col-sm-4">
                                                <label class="form-label " style="font-size:20px">Applicability</label>
                                            </div>
                                            <div class="col-sm-4">
                                                <label class="form-label " style="font-size:20px">Applicability attribute</label>
                                            </div>
											<div class="col-sm-4">
                                                <label class="form-label " style="font-size:20px"></label>
                                            </div>
                                        </div>
                                        <div class="form-row">
										<hr><hr><p>
                                            <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                            <input type="hidden" id="edit_model_year_id" name="year" value="{{ year.number }}">
											<div class="form-group">
                                                      <div class="col-sm-4">
                                                         <select name="Applicability" onchange="applicability_change_fcn();" id="applicability_select_id" required class="form-control" disabled >   <!--ON Hover tool tip...-->
                                                             <option>General_Model</option>
                                                             <option>Discipline_Model</option>
                                                             <option>Level_Model</option>
                                                             <option>Discipline-Level_Model</option>
                                                             <option>Course_Model</option>
                                                         </select>
                                                      </div>
                                            </div>
											<div class="form-group">
												  <div class="col-sm-4">
													 <select name="applicability_dd" id="applicability_attr_id" disabled class="form-control" >   <!--ON Hover tool tip...-->
													 </select>
												  </div>
											</div>
										    <div class="form-row">	
												<div class="form-group">
														<div class="col-sm-4">
															 <input type="submit" class="form-control" value="Submit" style=" height: 40px; font-size:20px">
														</div>
												</div>
										    </div>
										</div>
                                      </form>
                                </div>
                            <!--</div>
                        </div>-->
                    </div>
                </div>
          <!--  </div>-->
      </div>
</div>
<div id="spreadsheet" class="tab-pane fade in" data-url="/spreadsheet" >
        <div class="row">
            <div class="panel panel-default">
                    <div class="panel-body">
                               <table id="Export_course_id" class="table">

                                  <tr id="Course_tr_id">
                                      <th><h1>Course</h1></th>
                                      <th><h1>Title</h1></th>
                                      <th><h1>Offered</h1></th>
                                      <th><h1>Trimester</h1></th>
                                      <th><h1>Staff</h1></th>
                                      <th><h1>Duration</h1></th>
                                      <th><h1>Lectures/week</h1></th>
                                  </tr>
                                      {% for disc in course_set.keys()|list %}
                                         {% for tri in course_set[disc].keys()|list %}
                                             {% for lev in course_set[disc][tri].keys()|list|sort %}
                                                 {% for course in course_set[disc][tri][lev].keys()|list %}
                                                     <tr>
															 <td>{{ course }}</td>  <td> {{ course_set[disc][tri][lev][course]['Title'] }} </td>
															 <td>{{ course_set[disc][tri][lev][course]['is_offered'] }}</td><td>{{ tri }}</td>
															 <td> {% for lect in course_set[disc][tri][lev][course]['lect'].keys()|list %} {{ lect }}, {% endfor %}  </td>
															 <td>  {{ course_set[disc][tri][lev][course]['lecture_duration']  }}  mins</td>
                                                             <td>  {{ course_set[disc][tri][lev][course]['num_lectures_week'] }}   </td>
                                                     </tr>
                                                 {% endfor %}
                                             {% endfor %}
                                         {% endfor %}
                                     {% endfor %}
                               </table>
                               <button id="tableExport_id" hidden>
                                    Export Options
                               </button>
                    </div>
            </div>
        </div>
</div>

<div id="eventlog" class="tab-pane fade in" data-url="/eventlog" >
        <div class="row">
            <div class="panel panel-default">
                    <div class="panel-body">
					            <form class="form" method="POST" action='{{ url_for(".admin_view_log", _external=True) }}'>
                                        <div class="form-row">
                                            <div class="col-sm-2">
                                                <label class="form-label " style="font-size:20px">Events</label>
                                            </div>
                                            <div class="col-sm-2">
                                                <label class="form-label " style="font-size:20px">Event Spec.</label>
                                            </div>
                                            <div class="col-sm-2">
                                                <label class="form-label " style="font-size:20px">Lower Bound</label>
                                            </div>
                                            <div class="col-sm-2">
                                                <label class="form-label " style="font-size:20px">Upper Bound</label>
                                            </div>
											<div class="col-sm-2">
                                                <label class="form-label " style="font-size:20px">Last N Entries</label>
                                            </div>
											<div class="col-sm-2">
                                                <label class="form-label " style="font-size:20px">Submit</label>
                                            </div>
											
                                        </div>

                                        <div class="form-row">
                                                <div class="form-group">
                                                    <div class="col-sm-2">
														<select  name="event_select_name" required id="logfile_select_id" class="form-control" style="float: left; height: 50px; width: 180px; font-size:20px">
														 <option>Course</option>
														 <option>Staff</option>
														 <option>Association</option>
														 <option>Model</option>
														</select>
                                                    </div>
                                                </div>
                                                <p></p>
												<div class="form-group">
                                                    <div class="col-sm-2">
                                                        <!--  <div class='input-group date' id='low_bound_id'>-->
														<select  name="event_select_name"  id="spec_select_id"  class="form-control" style="float: left; height: 50px; width: 180px; font-size:20px">
														</select>
														<!--</div>-->
                                                    </div>
                                                </div>												
                                                <div class="form-group">
                                                    <div class="col-sm-2">
                                                        <!--  <div class='input-group date' id='low_bound_id'>-->
															 <input class="datepicker form-control" style="float: left; height: 50px; width: 180px; font-size:20px" name="start_time" id="low_bound_id" required > </input>
														<!--</div>-->
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                      <div class="col-sm-2">
															<input class="datepicker form-control" style="float: left; height: 50px; width: 180px; font-size:20px" name="end_time" id="hi_bound_id" required > </input>
                                                      </div>
                                                </div>
												
                                                <div class="form-group">
                                                    <div class="col-sm-2">
														<input name="max_entries_name" type="number" id="max_entries_id" min="0" max="100" class="form-control" style="width:180px; height:50px;" required>
												    </div>
                                                </div>
                                               <p></p>
                                                
                                        </div>
                                        <hr><hr><p>
                                        <input type="hidden" name="csrf_token" value="{{csrf_token() }}">
                                        <input type="hidden" id="event_log_year_id" name="year" value="{{ year.number }}">
                                        
                                            <div class="form-group">
                                                <div class="col-sm-2">
                                                     <input type="button" id='view_log_button_id' class="form-control" value="Submit" style="float: right; height: 50px; width: 180px; font-size:20px">
                                                </div>
                                            </div>
                                </form>
								<hr>
								 <table id="log_set_id" class="table" style="table-layout: fixed; width: 100%">

                                  <tr id="log_hdr_id">
                                     <!-- <th><h1>Lectures/week</h1></th>-->
                                  </tr>
                                      
									  
                               </table>
								
								
								
                    </div>
            </div>
        </div>
</div>


</div>
{% endblock %}

{% block js_bottom %}
            <script src="/libs/jquery/3.2.1/jquery.min.js"></script>
			<script src="/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
            <script src="/libs/bootstrap/3.3.7/js/bootstrap.min.js"></script>			

            <script src=   "https://unpkg.com/xlsx@0.14.3/jszip.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.14.3/xlsx.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.js"></script>
            <script src="https://unpkg.com/tableexport@5.2.0/dist/js/tableexport.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>

    <script src="https://code.highcharts.com/modules/exporting.js"></script>
<!--<script src="https://code.highcharts.com/modules/export-data.js"></script>-->


<script>
//Naming conventions used. We use the "_base" as immutable type, and others as nullable to indicate whether the variables are to be displayed.
var YEAR={{ year.number }};

// GRAPH RESET FLAGS
var reset_load=0
var reset_disc=0
var courses_reset_level=0
var courses_reset_disc=0
var courses_reset_load=0
var courses_reset_tri=0

//BASIC CONSTANT DEFINITIONS.
T1_str='1';
T2_str='2';
T3_str='3';
Admin_str='Admin';
Research_str='Research';
Low_str='Low';
Med_str='Med';
High_str='High';
Hi_thresh=.85//{{HI_THRESH}};//.85//
Med_thresh=.6//{{MED_THRESH}};//.65//

COURSE_HOURS={{COURSE_HOURS}}
FTE_HOURS={{FTE_HOURS}}

model_Hi_thresh={{ hi_thresh }};
model_Med_thresh={{ low_thresh }};
//model_Low_thresh=1;

// Note the three elements base is idempotent, the dictionary and array -required for different purposes...
var courses_display_lev_base=['100','200','300','400','500'];
var courses_display_lev_array=['100','200','300','400','500'];
var courses_display_lev={};
    courses_display_lev['100']='100';
    courses_display_lev['200']='200';
    courses_display_lev['300']='300';
    courses_display_lev['400']='400';
    courses_display_lev['500']='500';


//COLOUR SETS. The base represents immutible object, where as those without the tag are altered.
var GREY='#D3D3D3';

var display_lev_color_base= ['#9467bd', '#d62728', '#2ca02c', '#ff7f0e', '#1f77b4'];
var display_lev_color= ['#9467bd', '#d62728', '#2ca02c', '#ff7f0e', '#1f77b4'];

var display_disc_color_base= ['#bcbd22', '#ff4000','#00cc66', '#cc0066', '#9467bd', '#8c564b', '#e377c2', '#17becf',  '#f45b5b'  ];
var display_disc_color=['#bcbd22', '#ff4000','#00cc66', '#cc0066', '#9467bd', '#8c564b', '#e377c2', '#17becf',     '#f45b5b'  ];
var display_weight_color_base=['rgb(31,119,180)','rgb(255,152,39)','rgb(44,160,44)'];   // staff load, pie color base
var display_weight_color=['rgb(31,119,180)','rgb(255,152,39)','rgb(44,160,44)'];        // staff load pie color instance
var display_tri_color_base=['#c14fd6','#3cd949','#f7f245', '#ff7f0e','#3e98ff' ];      //course and staff trimester base
var display_tri_color=['#c14fd6','#3cd949','#f7f245', '#ff7f0e','#3e98ff' ];

var courses_display_disc_color=['#bcbd22', '#ff4000','#00cc66', '#cc0066', '#9467bd', '#8c564b', '#e377c2', '#17becf' ,  '#f45b5b' ];
var courses_display_disc_color_base= ['#bcbd22', '#ff4000','#00cc66', '#cc0066', '#9467bd', '#8c564b', '#e377c2', '#17becf',  '#f45b5b'];
var courses_display_weight_color_base=['#90AFC5','#336b87','#2A3132'];   // staff load, pie color base
var courses_display_weight_color=['#90AFC5','#336b87','#2A3132'];        // staff load pie color instance
var courses_display_tri_color_base=['#c14fd6','#3cd949','#f7f245', '#ff7f0e' ];      //course and staff trimester base
var courses_display_tri_color=['#c14fd6','#3cd949','#f7f245', '#ff7f0e' ];


//Staff list.
var staff_set_base=[{% for disc in discipline_set %} {% for member in (group_workload[disc.name].keys()|list) %} '{{ member|safe }}' ,{% endfor %} {% endfor %} ];
//var display_staff=[{% for disc in discipline_set %} {% for member in (group_workload[disc.name].keys()|list) %} '{{ member|safe }}' ,{% endfor %} {% endfor %}];

var display_trimester_base={};            //staff  Dictionary contaitning base trimester strings.
var display_trimester={};                 //staff Display trimester strings.

    display_trimester[T1_str]=T1_str;
    display_trimester[T2_str]=T2_str;
    display_trimester[T3_str]=T3_str;
    display_trimester[Admin_str]=Admin_str;
    display_trimester[Research_str]=Research_str;

    display_trimester_base[T1_str]=T1_str;
    display_trimester_base[T2_str]=T2_str;
    display_trimester_base[T3_str]=T3_str;
    display_trimester_base[Admin_str]=Admin_str;
    display_trimester_base[Research_str]=Research_str;


var display_trimester_base_array=[T1_str,T2_str,T3_str,Admin_str,Research_str];
var display_trimester_array=[T1_str,T2_str,T3_str,Admin_str,Research_str];
var display_group_base=[{% for disc in discipline_set %}'{{disc.name}}', {% endfor %}];
var display_groups=[{% for disc in discipline_set %}"{{ disc.name}}", {% endfor %}];
var display_weight_base=[Low_str,Med_str,High_str];
var display_weights=[Low_str,Med_str,High_str];


///COURSE VIEWPOINT FLAGS and VARS
var courses_display_tri_base_array=[T1_str,T2_str,T3_str,'F'];     //course trimester
var courses_display_tri_array=[T1_str,T2_str,T3_str,'F'];
var courses_display_trimester_base={};
    courses_display_trimester_base[T1_str]=T1_str;
    courses_display_trimester_base[T2_str]=T2_str;
    courses_display_trimester_base[T3_str]=T3_str;
    courses_display_trimester_base['F']='F';
var courses_display_trimester={};
    courses_display_trimester[T1_str]=T1_str;
    courses_display_trimester[T2_str]=T2_str;
    courses_display_trimester[T3_str]=T3_str;
    courses_display_trimester['F']='F';

var courses_display_group_array_base=[{% for disc in discipline_set %}'{{disc.name}}', {% endfor %}];
var courses_display_group_array=[{% for disc in discipline_set %}"{{ disc.name}}", {% endfor %}];

var courses_display_weight_base=['Full','Incomplete','No_Coord'];
var courses_display_weights=['Full', 'Incomplete','No_Coord'];//'Lab_Hours'];


var local_group_workload= {} ;   //local copy of workload_group template var
var display_local_group_workload={};
var display_group_workload={};
var tri_sum={};                  //total workload [discipline][member] //totally dynamically assigned
var tri_sum_t={}
var total_tri_sum={};            //total workload [discipline][Hi Low] //totally dynamic assigned
var total_tri_sum_t={};            //total workload [discipline][Hi Low] //totally dynamic assigned
var total_load_disc_sum={};
var year_total_work_per_group={};
var total_load_sum=[0,0,0];
var total_load_sum_base;
//Model equiv
var model_local_group_workload= {} ;   //local copy of workload_group template var
var  model_display_local_group_workload={};
var  model_display_group_workload={};
var  model_tri_sum={};                  //total workload [discipline][member] //totally dynamically assigned
var  model_tri_sum_t={}
var  model_total_tri_sum={};            //total workload [discipline][Hi Low] //totally dynamic assigned
var  model_total_tri_sum_t={};            //total workload [discipline][Hi Low] //totally dynamic assigned
var  model_total_load_disc_sum={};
var  model_year_total_work_per_group={};
var  model_total_load_sum=[0,0,0];

var display_values_admin = [];
var display_values_research = [];
var display_values_1 = [];
var display_values_2 = [];
var display_values_3 = [];
//Model ewquiv
var model_display_values_admin = [];
var model_display_values_research = [];
var model_display_values_1 = [];
var model_display_values_2 = [];
var model_display_values_3 = [];



var group_set_base={{ group_set | safe }};//{};
var group_course_set_base = {{ group_course_set | safe }};//{};

var local_course_set={{ course_set | safe }} ;//{};
var local_course_group_course_set={{ course_group_course_set | safe }} ;//;{};
var local_course_group_workload_sum={{ course_group_workload_sum | safe }} ;//;{};

var local_role_set={{role_set | safe}};
var local_staff_role={{staff_role | safe}};
var local_debug='{{debug | safe}}';

var local_role_map={{role_map | safe}};

var unique={};
var level_sum={};
var courses_level_sum={};
var courses_total_sum=0;
var courses_disc={};
var courses_tri={};
var course_load={};
course_load['Full']=0;
course_load['Incomplete']=0;
course_load['No_Coord']=0;
//course_load['Lab_Hours']=0;

display_local_group_workload={{ group_workload | safe }};
local_group_workload={{ group_workload | safe }};

model_display_local_group_workload={{ model_group_workload | safe }};
model_local_group_workload={{ model_group_workload | safe }};

local_model_set={{ model_set | safe }};
local_model_map={{ model_map | safe }};
local_model_description={{ model_description | safe }};
local_model_type={{ model_type | safe }};
local_model_type_details={{ model_type_details | safe }};
local_model_set_thresh={{ model_thresh | safe }};

local_complete_model_set={{ model_map | safe }};
local_model_set_name='{{ model_set_name | safe }}';

//alert(model_set);

{% for disc in discipline_set %}
// local_group_workload['{{disc.name}}']={};
 //display_local_group_workload['{{disc.name}}']={};
 tri_sum['{{disc.name}}']={};
 tri_sum_t['{{disc.name}}']={};
 total_tri_sum['{{disc.name}}']={};
 total_tri_sum['{{disc.name}}'][High_str]=0;
 total_tri_sum['{{disc.name}}'][Med_str]=0;
 total_tri_sum['{{disc.name}}'][Low_str]=0;

 //model_local_group_workload['{{disc.name}}']={};
 //model_display_local_group_workload['{{disc.name}}']={};
 model_tri_sum['{{disc.name}}']={};
 model_tri_sum_t['{{disc.name}}']={};
 model_total_tri_sum['{{disc.name}}']={};
 model_total_tri_sum['{{disc.name}}'][High_str]=0;
 model_total_tri_sum['{{disc.name}}'][Med_str]=0;
 model_total_tri_sum['{{disc.name}}'][Low_str]=0;

 year_total_work_per_group['{{disc.name}}']=0;
 model_year_total_work_per_group['{{disc.name}}']=0;

 {% for member in (group_workload[disc.name].keys()|list) %}
     tri_sum['{{disc.name}}']['{{ member|safe }}']=0;
     tri_sum_t['{{disc.name}}']['{{ member|safe }}']=0;
     //model
     model_tri_sum['{{disc.name}}']['{{ member|safe }}']=0;
     model_tri_sum_t['{{disc.name}}']['{{ member|safe }}']=0;
 {% endfor %}

{% endfor %}

{% for disc in discipline_set %}
 display_group_workload['{{disc.name}}']={};
 total_load_disc_sum['{{disc.name}}']=0;
//MODEL
 model_total_load_disc_sum['{{disc.name}}']=0;

 //u=display_trimester.keys();
 for(var tri_ind=0;tri_ind< display_trimester_base.length; tri_ind++) {
     display_group_workload['{{disc.name}}'][display_trimester[tri_ind]]=0;
//MODEL
     model_display_group_workload['{{disc.name}}'][display_trimester[tri_ind]]=0;
 };
{% endfor %}

var residual_hours=false;
var keep_load_static=false;
var keep_disc_static=false;
var courses_keep_disc_static=false;

var load_first_click=0
var disc_first_click=0
var tri_first_click=0

var courses_load_first_click=0
var courses_disc_first_click=0
var courses_tri_first_click=0
var courses_lev_first_click=0

var apply_model=0

var local_staff_FTE_dict={};
local_staff_FT_dict={};
{% for disc in discipline_set %}
{% for member in (group_workload[disc.name].keys()|list) %}
 local_staff_FTE_dict['{{ member }}']={{ staff_dict[ member ].full_time_equivalent}} - {{ staff_dict[ member ].buyout}}- {{staff_dict[ member ].leave}};
 local_staff_FT_dict['{{ member }}']={{ staff_dict[ member ].full_time_equivalent}} ;
{% endfor %}
{% endfor %}
x=1;

var update_staff_breakdown=function(){
    var q;
    //alert("------------------------------------------------UPDATEING STAFF BREAKDOWN ------------------------------------------")
    for(var disc_ind=0;disc_ind<display_group_base.length;disc_ind++) {
        var stf_set = Object.keys(local_group_workload[display_group_base[disc_ind]]);
        for (var member_ind = 0; member_ind < stf_set.length; member_ind++) {
            if ((display_local_group_workload[display_group_base[disc_ind]][stf_set[member_ind]]['Admin'] == 0) && (display_local_group_workload[display_group_base[disc_ind]][stf_set[member_ind]]['Research'] == 0) && (display_local_group_workload[display_group_base[disc_ind]][stf_set[member_ind]]['1'] == 0) && (display_local_group_workload[display_group_base[disc_ind]][stf_set[member_ind]]['2'] == 0) && (display_local_group_workload[display_group_base[disc_ind]][stf_set[member_ind]]['3'] == 0)  || display_groups[disc_ind]==0 ) {
                q=stf_set[member_ind].replace(/\s/g,'');
                var x = document.getElementById('staff_breakdown_'+q+'_id');
                x.style.display = "none";
            }
            else{
                q= stf_set[member_ind].replace(/\s/g,'');
                var x = document.getElementById('staff_breakdown_'+q+'_id');
                x.style.display = "block";
            }
        }
    }
}

var load_display_changed=function(ev,thiss) {
    var i;
     //Check whether any groups are disabled and if not disable all but the clicked segment.
    load_first_click=true;
    if(reset_load==0) {

        for (i = 0; i < display_weight_base.length; i++) {
            if (display_weight_color[i] == GREY) {
                load_first_click=load_first_click-1;
            }
        }
        //Grey out everything except the segment clicked...
        if ( load_first_click == true) {
            for (i = 0; i < display_weight_base.length; i++) {
                if (display_weight_base.indexOf(thiss.name) != i) {
                    display_weight_color[i] = GREY;
                    display_weights[i] = 0;
                    chart_load.series[0].data[i].update({color: GREY});
                }
            }
        }
        //If there is only 1 active slice and a click has been made on this slice... Reset all slices...
        else if(load_first_click == -1*display_weight_base.length+2  &&  display_weight_color[display_weight_base.indexOf(thiss.name)] != '#D3D3D3') {
            //RESET all!!
            for(var i=0;i<display_weight_base.length;i++){
                display_weight_color[i] = display_weight_color_base[i];
                display_weights[i] = display_weight_base[i];
                chart_load.series[0].data[i].update({color: display_weight_color[i]});
            }
           // reset_load=true;

        }//by inference... turn on the slice clicked.
        else if(load_first_click == -1*display_weight_base.length+2 ){
                display_weight_color[display_weight_base.indexOf(thiss.name)] = display_weight_color_base[display_weight_base.indexOf(thiss.name)];
                display_weights[display_weight_base.indexOf(thiss.name)] = thiss.name;
                chart_load.series[0].data[display_weight_base.indexOf(thiss.name)].update({color: display_weight_color[display_weight_base.indexOf(thiss.name)]});
        }
        else{
            if(display_weight_color[display_weight_base.indexOf(thiss.name)] != GREY) { //then it exists... -> grey it.
                display_weight_color[display_weight_base.indexOf(thiss.name)] = GREY;
                display_weights[display_weight_base.indexOf(thiss.name)] = 0;
                chart_load.series[0].data[display_weight_base.indexOf(thiss.name)].update({color: GREY});
            } else {
                display_weight_color[display_weight_base.indexOf(thiss.name)] = display_weight_color_base[display_weight_base.indexOf(thiss.name)];
                display_weights[display_weight_base.indexOf(thiss.name)] = display_weight_base[display_weight_base.indexOf(thiss.name)];
                chart_load.series[0].data[display_weight_base.indexOf(thiss.name)].update({color: display_weight_color[display_weight_base.indexOf(thiss.name)]});
            }
        }
    }
    update_display_data();

    if(reset_load==true){
        //update the load distribution chart
        update_chart_load(total_load_sum);
    }
    //Fix the load display
    keep_load_static=true;
    var fixed=false;
    for(var v=0;v<display_groups.length;v++){
       if(display_groups[v] == 0){
           fixed=true;
       }
    }

    if(fixed==false){
        update_chart_discipline(total_load_disc_sum);
    }
    //update_discipline_display(ev,thiss);

    update_chart_staff(display_values_admin,display_values_research,display_values_1, display_values_2,display_values_3);
    update_staff_breakdown();
};


var tri_flag;
var trimester_display_changed=function(ev,thiss,tri_flag=0) {
		var found=0;
		var this_element={visible: ev,name: thiss};
		
		var visibility = this_element.visible// this_element.visible ? 'visible' : 'hidden';
		//var x = document.getElementsByName("1");
		tri_first_click=1;
		for(i=0; i<display_trimester_array.length;i++){
			if(display_trimester[display_trimester_base_array[i]]==0) tri_first_click=0;
		}
		
		tri_reset_flag=1; ///If any of the slices are nulled infer its not a reset...
	    if(display_trimester[display_trimester_base_array.indexOf[this_element.name]]!=0){		
			for(i=0; i<display_trimester_array.length;i++){
					if(display_trimester_array[i] != this_element.name && display_trimester_array[i]==display_trimester_base[display_trimester_base_array[i]]) {
						tri_reset_flag=0;
						//alert("not a flag reset...");
					}
				}
		}
		
		if(tri_first_click) {
			for(i=0; i<display_trimester_array.length;i++){
			        if(display_trimester_array[i] != this_element.name){
					 display_trimester_array[i]= 0;
					 display_trimester[display_trimester_base_array[i]]= 0;
					 display_tri_color[i]=GREY;
					}
			 }
			 visibility='hidden';
			// alert('First Click');
		}
		
		if(this_element.name===T1_str  || tri_reset_flag!=0){
			if (visibility=='visible' && tri_reset_flag!=1){   //click greys out so remove from display...
			//alert('T1 visible');
				 display_trimester_array[display_trimester_base_array.indexOf(T1_str)]= 0;
				 display_trimester[T1_str]= 0;
				 display_tri_color[display_trimester_base_array.indexOf(T1_str)]=GREY;
			}else{
			//alert('T1hidden turning it on');
				 display_trimester[T1_str]=T1_str;
				 display_trimester_array[display_trimester_base_array.indexOf(T1_str)]=T1_str;
				 display_tri_color[display_trimester_base_array.indexOf(T1_str)]=display_tri_color_base[display_trimester_base_array.indexOf(T1_str)];
			}
		}
		if(this_element.name===T2_str || tri_reset_flag!=0){
			if (visibility=='visible' && tri_reset_flag!=1){   //click greys out so remove from display...
				display_trimester_array[display_trimester_base_array.indexOf(T2_str)]= 0;
				display_trimester[T2_str]= 0;
				display_tri_color[display_trimester_base_array.indexOf(T2_str)]=GREY;
			}else{
				display_trimester[T2_str]=T2_str;
				display_trimester_array[display_trimester_base_array.indexOf(T2_str)]=T2_str;
				display_tri_color[display_trimester_base_array.indexOf(T2_str)]=display_tri_color_base[display_trimester_base_array.indexOf(T2_str)];
			}
		}
		if(this_element.name===T3_str || tri_reset_flag!=0){
			if (visibility=='visible' && tri_reset_flag!=1){   //click greys out so remove from display...
				display_trimester_array[display_trimester_base_array.indexOf(T3_str)]= 0;
				display_trimester[T3_str]= 0;
				 display_tri_color[display_trimester_base_array.indexOf(T3_str)]=GREY;
			}else{
				display_trimester[T3_str]=T3_str;
				display_trimester_array[display_trimester_base_array.indexOf(T3_str)]=T3_str;
				 display_tri_color[display_trimester_base_array.indexOf(T3_str)]=display_tri_color_base[display_trimester_base_array.indexOf(T3_str)];
			}
		}
		if(this_element.name===Admin_str || tri_reset_flag!=0){
			if (visibility=='visible' && tri_reset_flag!=1){   //click greys out so remove from display...
				display_trimester_array[display_trimester_base_array.indexOf(Admin_str)]= 0;
				display_trimester[Admin_str]= 0;
				display_tri_color[display_trimester_base_array.indexOf(Admin_str)]=GREY;
			}else{
				display_trimester[Admin_str]=Admin_str;
				display_trimester_array[display_trimester_base_array.indexOf(Admin_str)]=Admin_str;
				display_tri_color[display_trimester_base_array.indexOf(Admin_str)]=display_tri_color_base[display_trimester_base_array.indexOf(Admin_str)]
			}
		}
		if(this_element.name===Research_str || tri_reset_flag!=0){
			if (visibility=='visible' && tri_reset_flag!=1){   //click greys out so remove from display...
				display_trimester_array[display_trimester_base_array.indexOf(Research_str)]= 0;
				display_trimester[Research_str]= 0;
				 display_tri_color[display_trimester_base_array.indexOf(Research_str)]=GREY;
			}else{
				display_trimester[Research_str]=Research_str;
				display_trimester_array[display_trimester_base_array.indexOf(Research_str)]=Research_str;
				 display_tri_color[display_trimester_base_array.indexOf(Research_str)]=display_tri_color_base[display_trimester_base_array.indexOf(Research_str)];
			}
		}
		update_display_data();
		update_chart_load(total_load_sum);
		update_chart_discipline(total_load_disc_sum);
		update_chart_staff(display_values_admin,display_values_research,display_values_1, display_values_2,display_values_3);
		update_staff_breakdown();
		
		//ADDED
		if(tri_flag==0)courses_tri_display_changed( this_element.visible,this_element.name,1) ; //THIS  MECHANISM TIES THE TWO OTHERWISE DISPARATE TRIMESTER UPDATES TOGETHER...
};

var disc_tie_flag; 
var discipline_display_changed=function(ev,thiss,disc_tie_flag=0) {
    var disc_ind;
	var click_obj=thiss;
    //Check whether any groups are disabled and if not disable all but the clicked segment.
    var disc_first_click=true;
    keep_disc_static=true;
    if(reset_disc==0) {
        for (disc_ind = 0; disc_ind < display_group_base.length; disc_ind++) {
            if (display_groups[disc_ind] == 0) {
                disc_first_click = disc_first_click-1;
            }
        }
        if (disc_first_click == true) {
            for (disc_ind = 0; disc_ind < display_group_base.length; disc_ind++) {
                if (display_group_base.indexOf(click_obj) != disc_ind) {
                    display_disc_color[disc_ind] = GREY;
                    display_groups[disc_ind] = 0;
                    chart_discipline.series[0].data[disc_ind].update({color: GREY});
                }
            }
        } else if(disc_first_click == -1*display_group_base.length+2  &&  display_disc_color[display_group_base.indexOf(click_obj)] != GREY) {
            //reset all!
              for(var i=0;i<display_group_base.length;i++){
                display_disc_color[i] = display_disc_color_base[i];
                display_groups[i] = display_group_base[i];
                chart_discipline.series[0].data[i].update({color: display_disc_color[i]});
              }
        }else if(disc_first_click == -1*display_group_base.length+2){
                display_disc_color[display_group_base.indexOf(click_obj)] = display_disc_color_base[display_group_base.indexOf(click_obj)];
                display_groups[display_group_base.indexOf(click_obj)] = click_obj;
                chart_discipline.series[0].data[display_group_base.indexOf(click_obj)].update({color: display_disc_color[display_group_base.indexOf(click_obj)]});
        }
        else {
            if (display_disc_color[display_group_base.indexOf(click_obj)] != GREY) { //then it exists...
                display_disc_color[display_group_base.indexOf(click_obj)] = GREY;
                display_groups[display_group_base.indexOf(click_obj)] = 0;
                chart_discipline.series[0].data[display_group_base.indexOf(click_obj)].update({color: GREY});//display_color_set[display_groups.indexOf(thiss.name)
            } else {
                display_groups[display_group_base.indexOf(click_obj)] = click_obj;
                display_disc_color[display_group_base.indexOf(click_obj)] = display_disc_color_base[display_group_base.indexOf(click_obj)];
                chart_discipline.series[0].data[display_group_base.indexOf(click_obj)].update({color: display_disc_color_base[display_group_base.indexOf(click_obj)]});
            }
        }
    }//else{
     // for (disc_ind = 0; disc_ind < display_group_base.length; disc_ind++) {
     //               display_disc_color[disc_ind] = display_disc_color_base[disc_ind];
     //               display_groups[disc_ind] = display_group_base[disc_ind];
     //               chart_discipline.series[0].data[display_group_base.indexOf(click_obj)].update({color: display_disc_color_base[display_group_base.indexOf(disc_ind)]});
     // }
   // }


    update_display_data();

    if(reset_disc==true){
        update_chart_discipline(total_load_disc_sum);
    }

    update_chart_load(total_load_sum);
    update_chart_staff(display_values_admin,display_values_research,display_values_1, display_values_2,display_values_3);
    update_staff_breakdown();
	
	if(disc_tie_flag==0)courses_disc_display_changed( ev,thiss,1) ;//THIS  MECHANISM TIES THE TWO OTHERWISE DISPARATE DISCIPLINE UPDATES TOGETHER...
	
};



var update_display_data=function() {
    var total_sum = 0;
    var model_total_sum = 0;
    var temp;
    var u;
    display_values_admin = [];
    display_values_research = [];
    display_values_1 = [];
    display_values_2 = [];
    display_values_3 = [];

    model_display_values_admin = [];
    model_display_values_research = [];
    model_display_values_1 = [];
    model_display_values_2 = [];
    model_display_values_3 = [];

    //resetting all variables....
    for (gp_ind = 0; gp_ind < display_group_base.length; gp_ind++) {
        total_load_disc_sum[display_group_base[gp_ind]] = 0;
        total_tri_sum[display_group_base[gp_ind]][Low_str] = 0;
        total_tri_sum[display_group_base[gp_ind]][Med_str] = 0;
        total_tri_sum[display_group_base[gp_ind]][High_str] = 0;
        year_total_work_per_group[display_group_base[gp_ind]] = 0;

        model_total_load_disc_sum[display_group_base[gp_ind]] = 0;
        model_total_tri_sum[display_group_base[gp_ind]][Low_str] = 0;
        model_total_tri_sum[display_group_base[gp_ind]][Med_str] = 0;
        model_total_tri_sum[display_group_base[gp_ind]][High_str] = 0;
        model_year_total_work_per_group[display_group_base[gp_ind]] = 0;

        var stf_set = Object.keys(local_group_workload[display_group_base[gp_ind]]);
        for (member_ind = 0; member_ind < stf_set.length; member_ind++) {
            tri_sum[display_group_base[gp_ind]][stf_set[member_ind]] = 0;
            //model based
            model_tri_sum[display_group_base[gp_ind]][stf_set[member_ind]] = 0;
        }
    }
	
    total_load_sum[0] = 0;
    total_load_sum[1] = 0;
    total_load_sum[2] = 0;

    model_total_load_sum[0] = 0;
    model_total_load_sum[1] = 0;
    model_total_load_sum[2] = 0;
	
	
	 //RESET ALL DISPLAY WORKLOAD STRUCTURES.
    for (var gp_ind = 0; gp_ind < display_groups.length; gp_ind++) {
        //First disable columns of chart_staff.
        var stf_set = Object.keys(local_group_workload[display_group_base[gp_ind]]);
        for (var member_ind = 0; member_ind < stf_set.length; member_ind++) {
             //   alert("hidding: " + stf_set[member_ind] + "  " + display_group_base[gp_ind] + " " + chart_staff.xAxis[0].categories.indexOf(stf_set[member_ind]));
                display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Admin'] = 0;
                display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Research'] = 0;
                display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['1'] = 0;
                display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['2'] = 0;
                display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['3'] = 0;

                model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Admin'] = 0;
                model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Research'] = 0;
                model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['1'] = 0;
                model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['2'] = 0;
                model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['3'] = 0;
        }
    }
	//Resetting roles...
//	let role_count_set = Object.assign({}, role_map);
	
    //Find total trimester set...   
	//tri_sum[groups][stf_set] = sum over all timesters for this staff member.    
	//total_sum = sum of all work done over all trimesters.
    for (var gp_ind = 0; gp_ind < display_groups.length; gp_ind++) {
	    if (display_groups[gp_ind] != 0) {        
			var stf_set = Object.keys(local_group_workload[display_group_base[gp_ind]]);
			for (var member_ind = 0; member_ind < stf_set.length; member_ind++) {
				tri_set=Object.keys(display_trimester_base);
				for (var tri_ind = 0; tri_ind < display_trimester_base_array.length; tri_ind++) {
				  //  alert("DISPLAY TRIMESTER: "+ display_trimester[tri_set[tri_ind]]);
					if (display_trimester[tri_set[tri_ind]] != 0) {
					            //POSSIBLE TO DISPLAY -VE FTE
                               // if(local_staff_FTE_dict[stf_set[member_ind]]<0){
                               //     local_staff_FTE_dict[stf_set[member_ind]]=0;
                               // }

                                if(tri_ind==0 || tri_ind==1 ||tri_ind==2) {
                                  //  tri_sum[display_groups[gp_ind]][stf_set[member_ind]] = tri_sum[display_groups[gp_ind]][stf_set[member_ind]] + local_group_workload[display_groups[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] * (.8)*COURSE_HOURS;
                                  //  total_sum = total_sum + local_group_workload[display_groups[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] * COURSE_HOURS;
                                    model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]] = model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]] + model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]];
                                    model_total_sum = model_total_sum + model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]; //TESTING ONLY
                                    tri_sum[display_groups[gp_ind]][stf_set[member_ind]]=model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]];
                                    total_sum=model_total_sum;

                                }else if( tri_ind==3 ||tri_ind==4) {
                                   // tri_sum[display_groups[gp_ind]][stf_set[member_ind]] = tri_sum[display_groups[gp_ind]][stf_set[member_ind]] + local_group_workload[display_groups[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] * FTE_HOURS * local_staff_FT_dict[stf_set[member_ind]];
                                  //  total_sum = total_sum + local_group_workload[display_groups[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] * FTE_HOURS * local_staff_FT_dict[stf_set[member_ind]];
                                    model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]] = model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]] + model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]* FTE_HOURS * local_staff_FT_dict[stf_set[member_ind]];
                                    model_total_sum = model_total_sum + model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]* FTE_HOURS * local_staff_FT_dict[stf_set[member_ind]];
                                    tri_sum[display_groups[gp_ind]][stf_set[member_ind]] =model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]]; //TESTING ONLY
                                    total_sum=model_total_sum;
                                }

							/*	if( (local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']*0.8*COURSE_HOURS + local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS*local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS)/Math.max((local_staff_FT_dict[stf_set[member_ind]]*FTE_HOURS, .00001))<Med_thresh  &&  display_weights[0]!=0  ){
								  if(tri_set[tri_ind]=='Admin' || tri_set[tri_ind]=='Research'  ){
								   display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]*FTE_HOURS*local_staff_FT_dict[stf_set[member_ind]];
								  }
								  else{
								   display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]*COURSE_HOURS;
								  }
								}
								else if( (local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']*0.8*COURSE_HOURS + local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS*local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS)/(local_staff_FTE_dict[stf_set[member_ind]]*FTE_HOURS)>Med_thresh &&   (local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']*COURSE_HOURS + local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS  +local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS)/(local_staff_FTE_dict[stf_set[member_ind]]*FTE_HOURS) <Hi_thresh  &&  display_weights[1]!=0 ){
								  if(tri_set[tri_ind]=='Admin' || tri_set[tri_ind]=='Research'  ){
								   display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]*FTE_HOURS *local_staff_FT_dict[stf_set[member_ind]];
								  }
								  else{
								   display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]*COURSE_HOURS;
								  }
								}
								else if( (local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']*0.8*COURSE_HOURS+ local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] +local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS)/(local_staff_FTE_dict[stf_set[member_ind]]*FTE_HOURS)>Hi_thresh  &&  display_weights[2]!=0 ){
								  if(tri_set[tri_ind]=='Admin' || tri_set[tri_ind]=='Research'  ){
								   display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]];
								  }
								  else{
								   display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]*COURSE_HOURS;
								  }
								}*/


								//MOEDEL EQUIVALENT
								if( (model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses'] + model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS)<model_Med_thresh*(local_staff_FT_dict[stf_set[member_ind]])  &&  display_weights[0]!=0  ){
								 if(tri_set[tri_ind]=='Admin' || tri_set[tri_ind]=='Research'  ){
								   model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]];
								 }
								 else{
								   model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]];
								 }
								}
								else if( (model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses'] + model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS)>model_Med_thresh*(local_staff_FT_dict[stf_set[member_ind]]) &&   (local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']*COURSE_HOURS + local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS  +local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS) <model_Hi_thresh*(local_staff_FT_dict[stf_set[member_ind]])  &&  display_weights[1]!=0 ){
								  if(tri_set[tri_ind]=='Admin' || tri_set[tri_ind]=='Research' ){
								   model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]];
								  }
								  else{
								   model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]];
								  }
								}
								else if( (model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']+ model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] +local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS)>model_Hi_thresh*(local_staff_FT_dict[stf_set[member_ind]])  &&  display_weights[2]!=0 ){
								  if(tri_set[tri_ind]=='Admin' || tri_set[tri_ind]=='Research'  ){
								   model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]]*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]];
								  }
								  else{
								   model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]] = model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]][tri_set[tri_ind]];
								  }
								}
						} 
					}
				}
        }
    }
    display_local_group_workload=model_display_local_group_workload;   //FOR TESTING PURPOSES...
   
	

    //Now find the total sum[gp][load_distr.]
    for (var gp_ind = 0; gp_ind < display_groups.length; gp_ind++) {
        if (display_groups[gp_ind] != 0) {
            /* for (member_ind = 0; member_ind < Object.keys(local_group_workload[display_groups[gp_ind]]).length; member_ind++) {
                var stf_set = Object.keys(local_group_workload[display_groups[gp_ind]]);
				
				//ADD ROLES HERE 
               if ( ( local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']*COURSE_HOURS +local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS) /(local_staff_FTE_dict[stf_set[member_ind]]*FTE_HOURS) < Med_thresh) {
                    total_tri_sum[display_groups[gp_ind]][Low_str] = total_tri_sum[display_groups[gp_ind]][Low_str] + tri_sum[display_groups[gp_ind]][stf_set[member_ind]];

                } else if ( (local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']*COURSE_HOURS +local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS) /(local_staff_FTE_dict[stf_set[member_ind]]*FTE_HOURS) > Med_thresh && (local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS) /(local_staff_FTE_dict[stf_set[member_ind]]*FTE_HOURS)< Hi_thresh) {
                    total_tri_sum[display_groups[gp_ind]][Med_str] = total_tri_sum[display_groups[gp_ind]][Med_str] + tri_sum[display_groups[gp_ind]][stf_set[member_ind]];

                } else if (( local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']*COURSE_HOURS +local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS)/(local_staff_FTE_dict[stf_set[member_ind]]*FTE_HOURS) > Hi_thresh) {
                    total_tri_sum[display_groups[gp_ind]][High_str] = total_tri_sum[display_groups[gp_ind]][High_str] + tri_sum[display_groups[gp_ind]][stf_set[member_ind]];
                }
            }*/

            //MODEL
            for (member_ind = 0; member_ind < Object.keys(local_group_workload[display_groups[gp_ind]]).length; member_ind++) {
                var stf_set = Object.keys(local_group_workload[display_groups[gp_ind]]);
				//ADD ROLES HERE 
                if ( (model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']+model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS)  < model_Med_thresh*(local_staff_FT_dict[stf_set[member_ind]])) {
                    model_total_tri_sum[display_groups[gp_ind]][Low_str] = model_total_tri_sum[display_groups[gp_ind]][Low_str] + model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]];
                } else if ((model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses']+model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS ) > model_Med_thresh*(local_staff_FT_dict[stf_set[member_ind]]) && (model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]]+ model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS) < model_Hi_thresh*(local_staff_FT_dict[stf_set[member_ind]])) {
                    model_total_tri_sum[display_groups[gp_ind]][Med_str] = model_total_tri_sum[display_groups[gp_ind]][Med_str] + model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]];
                } else if ((model_local_group_workload[display_groups[gp_ind]][stf_set[member_ind]]['Total_Courses'] +model_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Total_General']*FTE_HOURS* local_staff_FT_dict[stf_set[member_ind]] + local_staff_role[stf_set[member_ind]]['Total']*FTE_HOURS ) > model_Hi_thresh*(local_staff_FT_dict[stf_set[member_ind]])) {
                    model_total_tri_sum[display_groups[gp_ind]][High_str] = model_total_tri_sum[display_groups[gp_ind]][High_str] + model_tri_sum[display_groups[gp_ind]][stf_set[member_ind]];
                }
            }

            total_tri_sum=model_total_tri_sum;   //TESTING ONLY


            year_total_work_per_group[display_groups[gp_ind]] = total_tri_sum[display_groups[gp_ind]][High_str] + total_tri_sum[display_groups[gp_ind]][Med_str] + total_tri_sum[display_groups[gp_ind]][Low_str];

         //   model_year_total_work_per_group[display_groups[gp_ind]] = model_total_tri_sum[display_groups[gp_ind]][High_str] + model_total_tri_sum[display_groups[gp_ind]][Med_str] + model_total_tri_sum[display_groups[gp_ind]][Low_str];

            total_load_sum[0] = total_load_sum[0] + total_tri_sum[display_groups[gp_ind]][Low_str];
            total_load_sum[1] = total_load_sum[1] + total_tri_sum[display_groups[gp_ind]][Med_str];
            total_load_sum[2] = total_load_sum[2] + total_tri_sum[display_groups[gp_ind]][High_str];

            model_total_load_sum[0] = model_total_load_sum[0] + model_total_tri_sum[display_groups[gp_ind]][Low_str];
            model_total_load_sum[1] = model_total_load_sum[1] + model_total_tri_sum[display_groups[gp_ind]][Med_str];
            model_total_load_sum[2] = model_total_load_sum[2] + model_total_tri_sum[display_groups[gp_ind]][High_str];

            total_load_disc_sum[display_groups[gp_ind]] = total_load_disc_sum[display_groups[gp_ind]] + total_tri_sum[display_groups[gp_ind]][High_str];
            total_load_disc_sum[display_groups[gp_ind]] = total_load_disc_sum[display_groups[gp_ind]] + total_tri_sum[display_groups[gp_ind]][Med_str];
            total_load_disc_sum[display_groups[gp_ind]] = total_load_disc_sum[display_groups[gp_ind]] + total_tri_sum[display_groups[gp_ind]][Low_str];

            model_total_load_disc_sum[display_groups[gp_ind]] = model_total_load_disc_sum[display_groups[gp_ind]] + model_total_tri_sum[display_groups[gp_ind]][High_str];
            model_total_load_disc_sum[display_groups[gp_ind]] = model_total_load_disc_sum[display_groups[gp_ind]] + model_total_tri_sum[display_groups[gp_ind]][Med_str];
            model_total_load_disc_sum[display_groups[gp_ind]] = model_total_load_disc_sum[display_groups[gp_ind]] + model_total_tri_sum[display_groups[gp_ind]][Low_str];
        }
    }
    for (var gp_ind = 0; gp_ind < display_groups.length; gp_ind++) {
        var stf_set = Object.keys(local_group_workload[display_group_base[gp_ind]]);
        for (var member_ind = 0; member_ind < stf_set.length; member_ind++) {

            //ADDED ROLES HERE....        ADDED ROLES TO ADMIN
            if (display_trimester['Admin'] != 0) {
                display_values_admin.push(display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Admin']);

                model_display_values_admin.push(model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Admin']);
            } else {
                display_values_admin.push(0);

                model_display_values_admin.push(0);
            }

            if (display_trimester['Research'] != 0) {
                display_values_research.push(display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Research']);

                model_display_values_research.push(model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['Research']);
            } else {
                display_values_research.push(0);

                model_display_values_research.push(0);
            }
            if (display_trimester['1'] != 0) {
                display_values_1.push(display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['1']);

                model_display_values_1.push(model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['1']);
            } else {
                display_values_1.push(0);

                model_display_values_1.push(0);
            }

            if (display_trimester['2'] != 0) {
                display_values_2.push(display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['2']);

                model_display_values_2.push(model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['2']);
            } else {
                display_values_2.push(0);

                model_display_values_2.push(0);
            }

            if (display_trimester['3'] != 0) {
                display_values_3.push(display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['3']);

                model_display_values_3.push(model_display_local_group_workload[display_group_base[gp_ind]][stf_set[member_ind]]['3']);
            } else {
                display_values_3.push(0);

                model_display_values_3.push(0);
            }
          }
    }

    total_load_sum[0] = total_load_sum[0] / total_sum * 100;
    total_load_sum[1] = total_load_sum[1] / total_sum * 100;
    total_load_sum[2] = total_load_sum[2] / total_sum * 100;

    model_total_load_sum[0] = model_total_load_sum[0] / model_total_sum * 100;
    model_total_load_sum[1] = model_total_load_sum[1] / model_total_sum * 100;
    model_total_load_sum[2] = model_total_load_sum[2] / model_total_sum * 100;

    for (var gp_ind = 0; gp_ind < display_groups.length; gp_ind++) {
        if (display_groups[gp_ind] != 0) {
            total_tri_sum[display_groups[gp_ind]][High_str] = total_tri_sum[display_groups[gp_ind]][High_str] / total_sum * 100;
            total_tri_sum[display_groups[gp_ind]][Med_str] = total_tri_sum[display_groups[gp_ind]][Med_str] / total_sum * 100;
            total_tri_sum[display_groups[gp_ind]][Low_str] = total_tri_sum[display_groups[gp_ind]][Low_str] / total_sum * 100;
            total_load_disc_sum[display_groups[gp_ind]] = total_load_disc_sum[display_groups[gp_ind]] / total_sum * 100;

            model_total_tri_sum[display_groups[gp_ind]][High_str] = model_total_tri_sum[display_groups[gp_ind]][High_str] / model_total_sum * 100;
            model_total_tri_sum[display_groups[gp_ind]][Med_str] = model_total_tri_sum[display_groups[gp_ind]][Med_str] / model_total_sum * 100;
            model_total_tri_sum[display_groups[gp_ind]][Low_str] = model_total_tri_sum[display_groups[gp_ind]][Low_str] / model_total_sum * 100;
            model_total_load_disc_sum[display_groups[gp_ind]] = model_total_load_disc_sum[display_groups[gp_ind]] / model_total_sum * 100;
        }
    }
};


var totals=[]
var update_chart_staff = function (display_values_admin, display_values_research, display_values_1, display_values_2, display_values_3) {
            totals=[];
            var indx=[];

            if(apply_model==0) {
                if(residual_hours==true){
                    for (var i = 0; i < display_values_admin.length; i++) {
                        totals.push(FTE_HOURS*( local_staff_FT_dict[staff_set_base[i]]) * ((display_values_admin[i] + display_values_research[i] + display_values_1[i] + display_values_2[i] + display_values_3[i])>0) - (display_values_admin[i] + display_values_research[i] + display_values_1[i] + display_values_2[i] + display_values_3[i]))
                    }
                }else{
                    for (var i = 0; i < display_values_admin.length; i++) {
                        totals.push((display_values_admin[i] + display_values_research[i] + display_values_1[i] + display_values_2[i] + display_values_3[i])/1);//parseFloat(.00000000000000001+FTE_HOURS*( local_staff_FTE_dict[staff_set_base[i]])) );
                    }
                }
            }else{
                if(residual_hours==true){
                    for (var i = 0; i < display_values_admin.length; i++) {
                        totals.push(FTE_HOURS*( local_staff_FT_dict[staff_set_base[i]]) * ((display_values_admin[i] + display_values_research[i] + display_values_1[i] + display_values_2[i] + display_values_3[i])>0) - (parseFloat(model_display_values_admin[i]) + parseFloat(model_display_values_research[i]) + parseFloat(model_display_values_1[i]) + parseFloat(model_display_values_2[i]) + parseFloat(model_display_values_3[i])))
                    }
                }else {
                    for (var i = 0; i < model_display_values_admin.length; i++) {
                        var x = parseFloat(model_display_values_1[i]) + parseFloat(model_display_values_2[i]) + parseFloat(model_display_values_3[i]);
                        totals.push((parseFloat(model_display_values_admin[i]) + parseFloat(model_display_values_research[i]) + parseFloat(model_display_values_1[i]) + parseFloat(model_display_values_2[i]) + parseFloat(model_display_values_3[i]))) / 1;//parseFloat(.00000000000000001+FTE_HOURS*( local_staff_FTE_dict[staff_set_base[i]])))
                    }
                }
            }

            //reorder all values to alphabetical.
            indx=sort_get_index(totals);

            var staff_set_ordered=[];

            var display_values_admin_sorted=[];
            var display_values_research_sorted=[];
            var display_values_1_sorted=[];
            var display_values_2_sorted=[];
            var display_values_3_sorted=[];

            if (apply_model==0) {
                if(residual_hours==false) {
                    for (var i = 0; i < display_values_admin.length; i++) {
                        display_values_admin_sorted[i] = display_values_admin[indx[i]];
                        display_values_research_sorted[i] = display_values_research[indx[i]];
                        display_values_1_sorted[i] = display_values_1[indx[i]];
                        display_values_2_sorted[i] = display_values_2[indx[i]];
                        display_values_3_sorted[i] = display_values_3[indx[i]];
                        staff_set_ordered.push(staff_set_base[indx[i]]);
                    }
                }else{
                    for (var i = 0; i < display_values_admin.length; i++) {
                        display_values_admin_sorted[i] = 0;
                        display_values_research_sorted[i] = 0;
                        display_values_1_sorted[i] = 0;//(FTE_HOURS-display_values_admin[indx[i]]-display_values_research[indx[i]])  /3 - display_values_1[indx[i]];
                        display_values_2_sorted[i] = 0;//(FTE_HOURS-display_values_admin[indx[i]]-display_values_research[indx[i]])  /3 - display_values_2[indx[i]];
                        display_values_3_sorted[i] = ((display_values_admin[indx[i]] +display_values_research[indx[i]] + display_values_1[indx[i]]+ display_values_2[indx[i]]+ display_values_3[indx[i]] >0)* (FTE_HOURS*( local_staff_FT_dict[staff_set_base[indx[i]]])-display_values_admin[indx[i]]-display_values_research[indx[i]] - display_values_1[indx[i]]- display_values_2[indx[i]]- display_values_3[indx[i]]));//(FTE_HOURS-display_values_admin[indx[i]]-display_values_research[indx[i]])  /3 - display_values_3[indx[i]];
                        staff_set_ordered.push(staff_set_base[indx[i]]);
                    }
                }
            }else{
                for(var i = 0; i < display_values_admin.length; i++) {
                    display_values_admin_sorted[i] = model_display_values_admin[indx[i]];
                    display_values_research_sorted[i] = model_display_values_research[indx[i]];
                    display_values_1_sorted[i] = model_display_values_1[indx[i]];
                    display_values_2_sorted[i] = model_display_values_2[indx[i]];
                    display_values_3_sorted[i] = model_display_values_3[indx[i]];
                    staff_set_ordered.push(staff_set_base[indx[i]]);
                }
            }

           // alert("THIS IS THE INDEX: "+ indx[1] +" "+staff_set_base[indx[1]] + " " );
	        for (i=0;i<chart_staff.series.length;i++)     chart_staff.series[i].setData([]);
            chart_staff.series[0].setData(display_values_admin_sorted, true);
            chart_staff.series[1].setData(display_values_research_sorted, true);
            chart_staff.series[2].setData(display_values_1_sorted, true);
            chart_staff.series[3].setData(display_values_2_sorted, true);
            chart_staff.series[4].setData(display_values_3_sorted, true);

            chart_staff.xAxis[0].setCategories(staff_set_ordered, true);
            chart_staff.redraw();
	       // residual_hours = false;
			 //EVENTAULLY THIS WILL NEED TO BE AN UPDATE NOT DESTRUCTION...
/*			 chart_staff.series[0].remove();
			 chart_staff.series[0].remove();
			 chart_staff.series[0].remove();
			 chart_staff.series[0].remove();
			 chart_staff.series[0].remove();
			 chart_staff.addSeries({ name: Admin_str, data: display_values_admin_sorted , color: display_tri_color[3] });
			 chart_staff.addSeries({ name: Research_str, data: display_values_research_sorted, color: display_tri_color[4]});
			 chart_staff.addSeries({ name: T1_str, data: display_values_1_sorted , color: display_tri_color[0]});
			 chart_staff.addSeries({ name: T2_str, data:  display_values_2_sorted ,color: display_tri_color[1]});
			 chart_staff.addSeries({ name: T3_str, data: display_values_3_sorted , color: display_tri_color[2]});
*/
// chart_staff.setOptions({ colors: display_tri_color_base});
//Z=[];

 //for(k=1;k<length(display_values_admin_sorted);k++){
//      z.push(display_tri_color_base[0];
//}

//chart_staff.addSeries({ data: display_values_admin_sorted, color: z });
// chart_staff.addSeries({ data: display_values_research_sorted});
// chart_staff.addSeries({ data: display_values_1_sorted});
// chart_staff.addSeries({ data: display_values_2_sorted});
// chart_staff.addSeries({ data: display_values_3_sorted});

 chart_staff.xAxis[0].setCategories(staff_set_ordered, true);

        };

var indices=[];

var sort_get_index=function(array_to_sort){
    indices=[];
    var array_copy=array_to_sort;
    var array_copy_temp=array_to_sort.slice();
    array_copy.sort((a, b)=>a-b);

    for(var i=0;i<array_copy.length;i++){
        indices.push(array_copy_temp.indexOf(array_copy[i]) );
        array_copy_temp[array_copy_temp.indexOf(array_copy[i])]=-1;
    }
    return indices;
}

/*

var sort_get_index=function(array_to_sort){
    var array_copy=array_to_sort;
    array_copy.sort();

    var indices=[];
    for(var i=0;i<array_copy.length;i++){
        alert('ARRAY: '+array_copy[i]);
        indices=array_to_sort.indexOf(array_copy[i]);
    }
    return indices;
}*/



var update_chart_load = function (total_load_sum) {

         if(apply_model==0) {
             chart_load.series[0].setData([{
                 y: total_load_sum[0],
             }, {
                 y: total_load_sum[1],
             }, {
                 y: total_load_sum[2],
             }
             ], true);
         }else{
             chart_load.series[0].setData([{
                 y: model_total_load_sum[0],
             }, {
                 y: model_total_load_sum[1],
             }, {
                 y: model_total_load_sum[2],
             }
             ], true);
         }
        };



var update_chart_discipline = function (total_load_disc_sum) {
        if(apply_model==0) {
            chart_discipline.series[0].setData([
                    {%  for disc in discipline_set  %}{
                        y: total_load_disc_sum['{{ disc.name }}'],
                        },
                    {% endfor %}], true);
        }else {
            chart_discipline.series[0].setData([
                    {%  for disc in discipline_set  %}{
                        y: model_total_load_disc_sum['{{ disc.name }}'],
                        },
                    {% endfor %}], true);
        }

        };


var chart_staff = new Highcharts.chart('summary_id', {
            chart: {
                type: 'column',
				style: {
				overflow: 'visible'
				}
            },
            title: {
                text: ''
            },
            xAxis: {
                type: 'category',
                labels: {
                    allowOverlap: true,
                    style: {
                        fontSize: 8,
                        color: '#000000',
                        fontWeight: 'bold',
                    },
                    step: 1,
                    rotation: -45
                },
                categories: [
                    {% for disc in discipline_set %}
                        {% for member in group_workload[disc.name].keys()|list|sort %}
                            '{{ member  }}',
                        {% endfor %}
                    {% endfor %}

                ],
                minTickInterval: 1,
                tickWidth: 0,
            },
            yAxis: {
                //min: -1000,
                title: {
                    text: 'Workload'
                },
                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                    }
                }
            },
            exporting: {
                buttons: {
                    contextButton: {
                        menuItems: ['model', 'base', 'residual',"printChart", "viewFullscreen", "separator", "downloadPNG", "downloadPDF", "downloadCSV", "downloadXLS","viewData"]
                    }
                },
                menuItemDefinitions: {
                    model: {
                        onclick: function (ev) {
                            apply_model = 1;
                            update_display_data(ev, this);
                            //update_chart_staff(model_display_values_admin, model_display_values_research, model_display_values_1, model_display_values_2, model_display_values_3)
                            update_chart_staff(model_display_values_admin, model_display_values_research, model_display_values_1, model_display_values_2, model_display_values_3)
                            update_chart_discipline(model_total_load_disc_sum)
                            update_chart_load(model_total_load_sum)
                        },
                        text: 'Model'
                    },
                    base: {
                        onclick: function (ev) {
                            apply_model = 0;
                            residual_hours=0;
                            update_display_data(ev, this);
                            update_chart_staff(display_values_admin, display_values_research, display_values_1, display_values_2, display_values_3)
                            update_chart_discipline(total_load_disc_sum)
                            update_chart_load(total_load_sum)
                        },
                        text: 'Base'
                    },
                },
            },
            legend: {
                align: 'right',
                x: -25,
                verticalAlign: 'top',
                y: -9,
                floating: true,
                backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
                borderColor: '#CCC',
                borderWidth: 1,
                shadow: false
            },
            tooltip: {
                headerFormat: '<b>{point.x}</b><br/>',
                pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'
            },
            credits: {
                enabled: false
            },
            plotOptions: {
                chart: {
                          marginTop: 0,
                          marginBottom: 0,
                          marginLeft: 0,
                          marginRight: 0,
                          plotBackgroundColor: '#f2f2f2',
                          plotBorderWidth: 0,
                          plotShadow: false,
						  overflow: 'visible',
                },
                column: {
                    pointPadding: -.2,
                    events: {
                        legendItemClick: function (event) {
						//return;
						    var vis;
							if(display_tri_color[display_trimester_base_array.indexOf(event.target.name)]==GREY){
							   vis='hidden';
							   }
							else{
							   vis='visible';
							}
						    var e={name: event.target.name, visible: vis} ;
							//event.target.visible=false;
                            trimester_display_changed( e.visible, e.name);
							return false;
                        }
                    },
                    stacking: 'overlap',
                    dataLabels: {
                        enabled: false,
                        allowOverlap: true,
                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'green',
                        format: "{y}",
                        distance: -20
                    },
                    line: {
                        pointInterval: 86400000,
                        pointStart: 1282408923000
                    },
                },
                allowPointSelect: false,
            },
            colors: [display_tri_color_base[4], display_tri_color_base[3], display_tri_color_base[0], display_tri_color_base[1], display_tri_color_base[2] ],
            series: [{
                name: 'Admin',
                data: [{% for disc in discipline_set %}{% for member in group_workload[disc.name].keys()|list|sort %}{{ group_workload[disc.name][member]['Admin']*FTE_HOURS  }}, {% endfor %}{% endfor %}],
            },
                {
                    name: 'Research',
                    data: [{% for disc in discipline_set %}{% for member in group_workload[disc.name].keys()|list|sort %}{{ group_workload[disc.name][member]['Research']*FTE_HOURS }}, {% endfor %}{% endfor %}],
                },
                {
                    name: T1_str,
                    data: [{% for disc in discipline_set %}{% for member in group_workload[disc.name].keys()|list|sort %}{{ group_workload[disc.name][member]['1']*COURSE_HOURS}}, {% endfor %}{% endfor %}],
                },
                {
                    name: T2_str,
                    data: [{% for disc in discipline_set %}{% for member in group_workload[disc.name].keys()|list|sort %}{{ group_workload[disc.name][member]['2']*COURSE_HOURS}}, {% endfor %}{% endfor %}],
                },
                {
                    name: T3_str,
                    data: [{% for disc in discipline_set %}{% for member in group_workload[disc.name].keys()|list|sort %}{{ group_workload[disc.name][member]['3']*COURSE_HOURS}}, {% endfor %}{% endfor %}],
                },
            ]
        });

var chart_load = new Highcharts.chart('load_id', {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: true,
                type: 'pie',
                marginTop: 0,
                marginBottom: 0,
                marginLeft: 0,
                marginRight: 0,
                plotBackgroundColor: '#f2f2f2',
                plotBorderWidth: 0,
                plotShadow: false,
                backgroundColor:'rgba(255, 255, 255, 0)',plotBackgroundColor: "#ffffff"
            },
                       title: {
                text: 'Load Distribution',
                fontSize: '1em'
            },
            subtitle: {
                text: ''
            },
            exporting: {
                buttons: {
                    contextButton: {
                        menuItems:  ['reset', "viewFullscreen", "printChart", "separator", "downloadPNG",  "downloadPDF", "downloadCSV","downloadXLS"]
                    }
                },
                menuItemDefinitions: {
                    reset: {
                        onclick: function (ev){
                          reset_load=1;
                          for(i=0;i< display_weight_base.length;i++){
                                        display_weight_color[i] = display_weight_color_base[i];
                                        display_weights[i]=display_weight_base[i];
                                        this.series[0].data[i].update({color: display_weight_color_base[i]});
                          }
                          load_display_changed(ev,this);
                          reset_load=0;
                        },
                        text: 'Reset'
                    },
                },
            },
            plotOptions: {
                pie: {
                    size: 200,
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '{point.name}',
                        distance: -20
                    },    slicedOffset: 0,
                    borderWidth: 0 // < set this option

                }, series: {
                    borderWidth: 1,
                    borderColor: 'black',
                    //selected: true,
                    point: {
                        events: {
                            click: function (event) {
                               load_display_changed(event, this);
                            }
                        }
                    },
                }
            },
            credits: {
                enabled: false
            },
            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.percentage:.2f}%{point.stackTotal}</b> of total<br/>'
            },

            series: [{
                data: [{
                    name: 'Low',
                    y: 0,
                    color: display_weight_color_base[0]
                }, {
                    name: 'Med',
                    y: 0,
                    color: display_weight_color_base[1]
                }, {
                    name: 'High',
                    y: 0,
                    color: display_weight_color_base[2]
                }]
            }]
        });

var chart_discipline = new Highcharts.chart('disc_id', {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: true,
                type: 'pie',
                marginTop: 0,
                marginBottom: 0,
                marginLeft: 0,
                marginRight: 0,
                plotBackgroundColor: '#f2f2f2',
                plotBorderWidth: 0,
                plotShadow: false,
                backgroundColor:'rgba(255, 255, 255, 0)',
                plotBackgroundColor: "#ffffff",
                backgroundColor:'rgba(255, 255, 255, 0)',plotBackgroundColor: "#ffffff"
            },
            exporting: {
                buttons: {
                    contextButton: {
                        menuItems:  ['reset', "viewFullscreen", "printChart", "separator", "downloadPNG",  "downloadPDF", "downloadCSV","downloadXLS"]
                    }
                },
                menuItemDefinitions: {
                    reset: {
                        onclick: function (ev){
                          reset_disc=1;
                          for(i=0;i< display_group_base.length;i++) {
                              display_disc_color[i] = display_disc_color_base[i];
                              this.series[0].data[i].update({color: display_disc_color_base[i]});
                              display_groups[i] = display_group_base[i]
                          }
                          discipline_display_changed(ev, this.name);
                          reset_disc=0;
                        },
                        text: 'Reset'
                    }
                },
            },

            title: {
                text: 'Discipline Distribution',
                fontSize: '1em'
            },
            subtitle: {
                text: ''
            },
            credits: {
                enabled: false
            },
            plotOptions: {
                pie: {
                    size: 200,
                    allowPointSelect: true,
                    slicedOffset: 0,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '{point.name}',
                        distance: -20
                    },
                      borderWidth: 0 // < set this option
                }, series: {
                    borderWidth: 1,
                    borderColor: 'black',
                    selected: true, point: {
                        events: {
                            click: function (event) {
                              //  alert(this.id);
                                this.slice(null);
                                discipline_display_changed(event, this.name);
                            }
                        }
                    },
                }
            },

            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.percentage:.2f}%</b> of total<br/>'
            },

            series: [{
                name: 'Disc. distr.',
                data: [ {% for disc in discipline_set %} {
                    name: '{{ disc.name }}',
                    y: total_load_disc_sum['{{disc.name}}'],
                    color: display_disc_color_base[{{ loop.index-1}}]
                },
                {% endfor %}
                ],
            }]
        });

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//courses
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

function onlyUnique(value, index, self) {
            return self.indexOf(value) === index;
        }

var update_course_breakdown=function(ev,thiss){
    var q;
   // alert("------------------------------------------------UPDATEING COURSE BREAKDOWN ------------------------------------------")

//ensure they are all turned on first...
    for(var disc_ind=0;disc_ind<courses_display_group_array_base.length;disc_ind++) {
           // alert('disc_ind');
            var tri_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]]);
            for (var tri_ind = 0; tri_ind < tri_set.length; tri_ind++) {
                    var lev_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]]);
                    for (var lev_ind = 0; lev_ind < lev_set.length; lev_ind++) {
                            var crs_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]]);
                            for (var crs_ind = 0; crs_ind < crs_set.length; crs_ind++) {
                                        q= courses_display_group_array_base[disc_ind]+'-' + crs_set[crs_ind]+'-'+tri_set[tri_ind];
                                         var x = document.getElementById('course_breakdown_'+q+'_id');
                                         x.style.display = "None";
                                      //   alert("blanking out "+crs_set[crs_ind] )
                                         }
                            }
            }
    }

    for(var disc_ind=0;disc_ind<courses_display_group_array_base.length;disc_ind++) {
           //DISABLE BASED ON DISCIPLINE
        if (courses_display_group_array[disc_ind] == 0) {
            continue;
        }
        //DISABLE BASED ON TRIMESTER
        var tri_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]]);
        for (var tri_ind = 0; tri_ind < tri_set.length; tri_ind++) {
            //DISABLE BASED ON TRIMESTER
            if ( !courses_display_tri_array.includes(tri_set[tri_ind])) {
                continue;
            }
            else {
                var lev_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]]);
                for (var lev_ind = 0; lev_ind < lev_set.length; lev_ind++) {
                    if (!courses_display_lev_array.includes(lev_set[lev_ind])) {
                        continue;
                    }
                    else {
                        var crs_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]]);
                        for (var crs_ind = 0; crs_ind < crs_set.length; crs_ind++) {
                            if (local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][crs_set[crs_ind]]['coord']=='None' && (courses_display_weights[2] == 'No_Coord')) {// noocord
                                temp=crs_set[crs_ind].substring(0,3);
                               // alert('ENABLING A No_Coord COURSE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
                               // if(temp==courses_display_group_array_base[disc_ind].substring(0,3) || crs_set[crs_ind].substring(0,4)=='DIST' || temp[0]=="X" ){
                                    q = courses_display_group_array_base[disc_ind] + '-' + crs_set[crs_ind] + '-' + tri_set[tri_ind];
                                    var x = document.getElementById('course_breakdown_' + q + '_id');
                                    x.style.display = "block";
                                //    alert("enablingout "+q )
                               // }else{
                               // }
                            }
                            if ((local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][crs_set[crs_ind]]['sum'] < .99) && (courses_display_weights[1] == 'Incomplete')) {// Incom. will need to change this....
                                temp=crs_set[crs_ind].substring(0,3);
                             //   if(temp==courses_display_group_array_base[disc_ind].substring(0,3) || crs_set[crs_ind].substring(0,4)=='DIST' || temp[0]=="X" ){
                                    q = courses_display_group_array_base[disc_ind] + '-' + crs_set[crs_ind] + '-' + tri_set[tri_ind];
                                    var x = document.getElementById('course_breakdown_' + q + '_id');
                                    x.style.display = "block";
                                 //   alert("enablingout "+q )
                               // }else{
                                //}
                            }
                            if ((local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][crs_set[crs_ind]]['sum'] >= .99) && (courses_display_weights[0] == 'Full')) {// FULL
                                temp=crs_set[crs_ind].substring(0,3);
                                //if(temp==courses_display_group_array_base[disc_ind].substring(0,3) || crs_set[crs_ind].substring(0,4)=='DIST'  || temp[0]=="X"){//(crs_set[crs_ind].substring(0)=='X' ) ){
                                    q = courses_display_group_array_base[disc_ind] + '-' + crs_set[crs_ind] + '-' + tri_set[tri_ind];
                                    var x = document.getElementById('course_breakdown_' + q + '_id');
                                    x.style.display = "block";
                              //      alert("enablingout "+q )
                               // }else{
                                //}
                            }
                        }
                    }
                }
            }
        }
    }
}

var update_courses_level = function () {
    // alert( "UPDATE COURSES LEVEL:" );

     //resetting all variables...
     for(var i=0;i<courses_display_group_array.length;i++) {
         courses_disc[courses_display_group_array[i]] = 0;
         courses_total_sum=0;
     }
     var temp = Object.keys(courses_display_trimester_base);
     for (var i = 0; i < temp.length; i++) {
        courses_tri[temp[i]] = 0;
     }
     for(var i=0;i<courses_display_lev_base.length;i++) {
         courses_level_sum[courses_display_lev_base[i]]=[];
         level_sum[courses_display_lev_base[i]]=0;

     }
     course_load['No_Coord']=0
     course_load['Full']=0
     course_load['Incomplete']=0
  //   course_load['Lab_Hours']=0

    var temp_array = [];
    for (var disc_ind = 0; disc_ind < courses_display_group_array.length; disc_ind++) {
        if(courses_display_group_array[disc_ind]!=0) {
            var tri_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]]); //why am i useing base here?? something to try, should be fine since above catch
            for (var tri_ind = 0; tri_ind < tri_set.length; tri_ind++) {
                if (courses_display_tri_array[tri_ind] != 0) {
                    var lev_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]]); //use base because
                    for (var lev_ind = 0; lev_ind < lev_set.length; lev_ind++) {
                        if (courses_display_lev_array.indexOf(lev_set[lev_ind]) != -1) {  //-1 if its not found
                            var course_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]]);
                            for (var c_ind = 0; c_ind < course_set.length; c_ind++) {
                              /*  if( (course_set[c_ind].substring(0,3)!=courses_display_group_array[disc_ind].substring(0,3) && course_set[c_ind].substring(0,4)!='DIST') && course_set[c_ind].substring(0,1)!='X' )  {       //MAKE ME DYNAMIC...
                                   continue;
                                }*/
                                if (!courses_level_sum[courses_display_lev_array[lev_ind]] || courses_level_sum[courses_display_lev_array[lev_ind]].indexOf(course_set[c_ind]) == -1) {  //IF THE COURSE HAS NOT ALREADY BEEN COUNTED.
                                    if (local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][course_set[c_ind]]['sum'] >= .99  ) {   //changed to add load switch...
                                        course_load['Full']++;
                                    } else if (local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][course_set[c_ind]]['sum'] < .99 ) {  //change =
                                        course_load['Incomplete']++;
                                    }
                                    if (local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][course_set[c_ind]]['coord'] == 'None'   ) {
                                        course_load['No_Coord']++;
                                    }
                               /*     if (local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][course_set[c_ind]]['Lab_Hours'] > 0   ) {
                                        var s_set = Object.keys(local_course_group_course_set[disc_ind][tri_set[tri_ind]][lev_set[lev_ind]][course_set[c_ind]]['lect']);
                                        var total_hours = 0;
                                        for (var s_ind = 0; s_ind < s_set.length; s_ind) {
                                            total_hours = total_hours + local_course_group_course_set[disc_ind][tri_set[tri_ind]][lev_set[lev_ind]][course_set[c_ind]]['lect'][s_set[s_ind]].lab_hours;
                                        }
                                        if (total_hours > 0){
                                        }
                                        else {
                                            course_load['Lab_hours']++
                                        }
                                    }*/

                                    if (local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][course_set[c_ind]]['sum'] >= .99 && courses_display_weights[0]=='Full'  ){
                                       courses_disc[courses_display_group_array[disc_ind]]++;
                                       courses_total_sum++;
                                       courses_tri[tri_set[tri_ind]]++;
                                       level_sum[lev_set[lev_ind]] ++;
                                    } else if (local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][course_set[c_ind]]['sum'] < .99 && courses_display_weights[1]=='Incomplete' ){
                                       courses_disc[courses_display_group_array[disc_ind]]++;
                                       courses_total_sum++;
                                       courses_tri[tri_set[tri_ind]]++;
                                       level_sum[lev_set[lev_ind]] ++;
                                    }
                                    else if (local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][course_set[c_ind]]['coord'] == 'None'  && courses_display_weights[2]=='No_Coord' ) {
                                        courses_disc[courses_display_group_array[disc_ind]]++;
                                        courses_total_sum++;
                                        courses_tri[tri_set[tri_ind]]++;
                                        level_sum[lev_set[lev_ind]] ++;
                                    }
                                }
                            }
                        } else {
                        }
                    }
                }
            }
        }
    }
	

    for (var disc_ind = 0; disc_ind < display_groups.length; disc_ind++) {
        courses_disc[display_groups[disc_ind]] = courses_disc[display_groups[disc_ind]] ;/// Math.max(courses_total_sum,1);
    }

}


$(document).ready(function () {

            //alert('UDPATETHIS IS IMPORTANT:');
            for (var i = 0; i < courses_display_lev_array.length; i++) {
                courses_level_sum[courses_display_lev_array[i]] = [];
            }

            var temp = Object.keys(courses_display_trimester_base);
            for (var i = 0; i < temp.length; i++) {
                courses_tri[temp[i]] = 0;
            }

            for (var i = 0; i < display_groups.length; i++) {
                courses_disc[display_groups[i]] = 0;
            }

            //FIRST DISPLAY STAFF DISCIPLINE AND LOAD CHARTS
            var dummy_1;
            var dummy_2;
            update_display_data();
            total_load_sum_base=total_load_sum;

            update_chart_load(total_load_sum);
            update_chart_discipline(total_load_disc_sum);
            update_courses_level();
            chart_level.series[0].setData([level_sum['100'],level_sum['200'],level_sum['300'],level_sum['400'],level_sum['500']], true);
            update_chart_staff(display_values_admin,display_values_research,display_values_1, display_values_2, display_values_3);

            update_chart_courses_disc();
            update_chart_courses_tri();
            update_chart_courses_load();
            update_course_breakdown();
            {% if not VIEW_STAFF==-1 %}
                view_staff('{{VIEW_STAFF}}','{{ staff_member_discipline }}',YEAR);
                $('#staff_details_tab_id').tab('show');
            {% endif %}

            {% if not VIEW_COURSE==-1 %}
                var course='{{ VIEW_COURSE }}';
                view_course('{{VIEW_COURSE}}',{{VIEW_COURSE_TRIMESTER}},course.substring(0,4) );
                $('#course_details_tab_id').tab('show');
            {% endif %}

            $("#Export_course_id").tableExport({type:'csv',escape:'false'});

			chart_staff.update({
			        exporting: {
					    buttons: {
								contextButton: {
									menuItems: [ {% for mod_i in model_set  %}'{{ mod_i | safe}}', {% endfor %} 'base', 'residual',  "printChart", "viewFullscreen", "separator", "downloadPNG", "downloadPDF", "downloadCSV", "downloadXLS","viewData"]
								}
							},
						menuItemDefinitions: {
						{% for mod_i in model_set  %}
							{{mod_i| safe}}: {
								onclick: function (ev) {
									apply_model = 1;
									g=get_model('{{mod_i}}');
									update_display_data(ev, this);
									//update_chart_staff(model_display_values_admin, model_display_values_research, model_display_values_1, model_display_values_2, model_display_values_3)
									update_chart_staff(model_display_values_admin, model_display_values_research, model_display_values_1, model_display_values_2, model_display_values_3)
									update_chart_discipline(model_total_load_disc_sum)
									update_chart_load(model_total_load_sum)
								},
								text: 'Custom Model: {{mod_i| safe}}'
							},
						{% endfor %}
						
							base: {
								onclick: function (ev) {
									apply_model = 0;
									update_display_data(ev, this);
									update_chart_staff(display_values_admin, display_values_research, display_values_1, display_values_2, display_values_3)
									update_chart_discipline(total_load_disc_sum)
									update_chart_load(total_load_sum)
								},
								text: 'Base'
							},
                            residual:{
                                onclick: function(ev) {
                                residual_hours = true;
                                update_display_data(ev, this);
                                update_chart_staff(display_values_admin, display_values_research, display_values_1, display_values_2, display_values_3)
                                update_chart_discipline(total_load_disc_sum)
                                update_chart_load(total_load_sum)
                            },
                            text: 'Residual Hours'
                           },
						}
					}					
			});		
			
          /*  buttons = Highcharts.getOptions().exporting.buttons.contextButton.menuItems.slice();
		    for(var i=0;i<model_set.length;i++){
				buttons.push({
						model: {
							onclick: function (ev) {
								apply_model = 1;
								get_model(model_set[i]);
								update_display_data(ev, this);
								//update_chart_staff(model_display_values_admin, model_display_values_research, model_display_values_1, model_display_values_2, model_display_values_3)
								update_chart_staff(model_display_values_admin, model_display_values_research, model_display_values_1, model_display_values_2, model_display_values_3);
								update_chart_discipline(model_total_load_disc_sum);
								update_chart_load(model_total_load_sum);							   
							},
							text: model_set[i]
						},
				  });
			};
			 
			chart_staff.update({
				  exporting: {
					buttons: {
					  contextButton: {
						menuItems: buttons
					  }
					}
				  }
			});*/
					

			
			
});



var courses_level_display_changed = function (event, thiss) {
         //   alert( "LEVEL DISPLAY CHANGED: "+thiss.category);
          var i;
          var courses_lev_first_click = true;
          if(courses_reset_level==0) {
              for (i = 0; i < courses_display_lev_array.length; i++) {
                  if (display_lev_color[i] == GREY) {
                      courses_lev_first_click =  courses_lev_first_click -1;
                  }
              }
              if (courses_lev_first_click == true) {
                  for (i = 0; i < courses_display_lev_array.length; i++) {
                      if (courses_display_lev_array[i] != thiss.category) {
                          display_lev_color[i] = GREY;
                          courses_display_lev_array[i] = 0;
                          courses_display_lev[courses_display_lev_base[i]] = 0;
                          chart_level.series[0].data[i].update({color: GREY});
                      }
                  }
              } else if (courses_lev_first_click == -1*courses_display_lev_array.length+2  && courses_display_lev[thiss.category] != 0) {
               //reset all!
                  for(var i=0;i<courses_display_lev_array.length;i++){
                    display_lev_color[i] = display_lev_color_base[i];
                    courses_display_lev_array[i] = courses_display_lev_base[i];
                    courses_display_lev[courses_display_lev_base[i]] = courses_display_lev_base[i];
                    chart_level.series[0].data[i].update({color: display_lev_color[i]});
              }
             }else if(courses_lev_first_click  == -1*courses_display_lev_array.length+2){
                    display_lev_color[courses_display_lev_base.indexOf(thiss.category)] = display_lev_color_base[courses_display_lev_base.indexOf(thiss.category)];
                    courses_display_lev_array[courses_display_lev_base.indexOf(thiss.category)] = courses_display_lev_base[courses_display_lev_base.indexOf(thiss.category)];
                    courses_display_lev[thiss.category] = courses_display_lev_base[courses_display_lev_base.indexOf(thiss.category)];
                    chart_level.series[0].data[courses_display_lev_base.indexOf(thiss.category)].update({color: display_lev_color[courses_display_lev_base.indexOf(thiss.category)]});
             }
               else {
                if (display_lev_color[courses_display_lev_base.indexOf(thiss.category)] != GREY) { //then it exists...
                    display_lev_color[courses_display_lev_base.indexOf(thiss.category)] = GREY;
                    courses_display_lev_array[courses_display_lev_base.indexOf(thiss.category)]=0;
                    courses_display_lev[thiss.category]= 0;
                    chart_level.series[0].data[courses_display_lev_base.indexOf(thiss.category)].update({color: GREY});//display_color_set[display_groups.indexOf(thiss.name)
                } else {
                    display_groups[display_group_base.indexOf(thiss.category)] = thiss.category;
                    courses_display_lev_array[courses_display_lev_base.indexOf(thiss.category)]= courses_display_lev_base[courses_display_lev_base.indexOf(thiss.category)];
                    display_lev_color[courses_display_lev_base.indexOf(thiss.category)]  = display_lev_color_base[courses_display_lev_base.indexOf(thiss.category)];
                    courses_display_lev[thiss.category]=thiss.category;
                    chart_level.series[0].data[courses_display_lev_base.indexOf(thiss.category)].update({color: display_lev_color_base[ courses_display_lev_base.indexOf(thiss.category)]});
                }
             }


          }
            //Fix the load display
            var keep_load_static = true;
            update_courses_level();
            update_chart_courses_disc();
            update_chart_courses_load();
            update_chart_courses_tri();
            update_course_breakdown();
        }

var update_chart_courses_level = function() {
    chart_level.series[0].setData([level_sum['100'], level_sum['200'], level_sum['300'], level_sum['400'], level_sum['500']], true);
}

var update_chart_courses_disc = function(){
    //console.log('Updating chart courses Disc');

    ///CHANGE ME! MAKE ME DYNAMIC....
    chart_courses_disc.series[0].data[0].update(courses_disc['SWEN']);
    chart_courses_disc.series[0].data[1].update(courses_disc['COMP']);
    chart_courses_disc.series[0].data[2].update(courses_disc['ECEN']);
    chart_courses_disc.series[0].data[3].update(courses_disc['NWEN']);
    chart_courses_disc.series[0].data[4].update(courses_disc['CGRA']);
    chart_courses_disc.series[0].data[5].update(courses_disc['ENGR']);
    chart_courses_disc.series[0].data[6].update(courses_disc['CYBR']);
    chart_courses_disc.series[0].data[7].update(courses_disc['RESY']);
    chart_courses_disc.series[0].data[8].update(courses_disc['XMUT'], true);
}

var update_chart_courses_tri =function(){
    //console.log('Updating chart courses tri ' + courses_tri['F'] + ' ' + courses_tri[T1_str]);
    chart_courses_tri.series[0].data[0].update(courses_tri[T1_str]);
    chart_courses_tri.series[0].data[1].update(courses_tri[T2_str]);
    chart_courses_tri.series[0].data[2].update(courses_tri[T3_str]);
    chart_courses_tri.series[0].data[3].update(courses_tri['F'], true);
}

var update_chart_courses_load=function() {
    //console.log('Updating courses load ' + courses_tri['F'] + ' ' + courses_tri[T1_str]);
    chart_courses_load.series[0].data[0].update( course_load['Full'] ); //, color: courses_display_weight_color[0] }
    chart_courses_load.series[0].data[1].update(course_load['Incomplete']);
    chart_courses_load.series[0].data[2].update(course_load['No_Coord'], true);
}


//var courses_disc_tie_flag;//if(disc_tie_flag==0)courses_discipline_display_changed( ev,thiss,1) ;
var courses_disc_display_changed = function (event, thiss,courses_disc_tie_flag=0 ) {
    var disc_ind;
	var click_obj=thiss;
    //Check whether any groups are disabled and if not disable all but the clicked segment.
    courses_disc_first_click=true;
    courses_keep_disc_static=true;
    if(courses_reset_disc==0) {
        for (disc_ind = 0; disc_ind < courses_display_group_array_base.length; disc_ind++) {
            if (courses_display_group_array[disc_ind] == 0) {
                courses_disc_first_click = courses_disc_first_click-1;
            }
        }
        if (courses_disc_first_click == true) {
            for (disc_ind = 0; disc_ind < courses_display_group_array_base.length; disc_ind++) {
                if (courses_display_group_array_base.indexOf(click_obj) != disc_ind) {
                    courses_display_disc_color[disc_ind] = GREY;
                    courses_display_group_array[disc_ind] = 0;
                    chart_courses_disc.series[0].data[disc_ind].update({color: GREY});
                }
            }
        } else if(courses_disc_first_click == -1*courses_display_group_array_base.length+2  &&  courses_display_disc_color[courses_display_group_array_base.indexOf(click_obj)] != GREY) {
            //reset all!
              for(var i=0;i<display_group_base.length;i++){
                courses_display_disc_color[i] = courses_display_disc_color_base[i];
                courses_display_group_array[i] = courses_display_group_array_base[i];
                chart_courses_disc.series[0].data[i].update({color: courses_display_disc_color[i]});
              }
        }else if(courses_disc_first_click == -1*courses_display_group_array_base.length+2){
                courses_display_disc_color[courses_display_group_array_base.indexOf(click_obj)] = courses_display_disc_color_base[courses_display_group_array_base.indexOf(click_obj)];
                courses_display_group_array[courses_display_group_array_base.indexOf(click_obj)] = click_obj;
                chart_courses_disc.series[0].data[courses_display_group_array_base.indexOf(click_obj)].update({color: courses_display_disc_color[courses_display_group_array_base.indexOf(click_obj)]});
        }
        else {
            if (courses_display_disc_color[courses_display_group_array_base.indexOf(click_obj)] != GREY) { //then it exists...
                courses_display_disc_color[courses_display_group_array_base.indexOf(click_obj)] = GREY;
                courses_display_group_array[courses_display_group_array_base.indexOf(click_obj)] = 0;
                chart_courses_disc.series[0].data[courses_display_group_array_base.indexOf(click_obj)].update({color: GREY});//display_color_set[display_groups.indexOf(thiss.name)
            } else {
                courses_display_group_array[courses_display_group_array_base.indexOf(click_obj)] = click_obj;
                courses_display_disc_color[courses_display_group_array_base.indexOf(click_obj)] = courses_display_disc_color_base[courses_display_group_array_base.indexOf(click_obj)];
                chart_courses_disc.series[0].data[courses_display_group_array_base.indexOf(click_obj)].update({color: courses_display_disc_color_base[courses_display_group_array_base.indexOf(click_obj)]});
            }
        }
    }

    update_courses_level();
    update_chart_courses_load();
    update_chart_courses_tri();
    update_chart_courses_level();
    update_course_breakdown();
	
	if(courses_disc_tie_flag==0)discipline_display_changed( event,thiss,1) ;
};



var courses_load_display_changed = function (event, thiss) {
   var i;
     //Check whether any groups are disabled and if not disable all but the clicked segment.
   courses_load_first_click=true;
   if(courses_reset_load==0) {
       for (i = 0; i < courses_display_weight_base.length; i++) {
           if (courses_display_weight_color[i] == GREY) {
                courses_load_first_click=courses_load_first_click-1;
           }
       }
       if (courses_load_first_click == true) {

           for (i = 0; i < courses_display_weight_base.length; i++) {
               if (courses_display_weight_base.indexOf(thiss.name) != i) {
                   courses_display_weight_color[i] = GREY;
                   courses_display_weights[i] = 0;
                   chart_courses_load.series[0].data[i].update({color: GREY});
               }
           }
       } else if(courses_load_first_click == -1*courses_display_weight_base.length+2  &&  courses_display_weight_color[courses_display_weight_base.indexOf(thiss.name)] != GREY) {
                  for(var i=0;i<courses_display_weight_base.length;i++){
                                courses_display_weight_color[i] = courses_display_weight_color_base[i];
                                courses_display_weights[i] = courses_display_weight_base[i];
                                chart_courses_load.series[0].data[i].update({color: courses_display_weight_color[i]});
                  }
        }//by inference... turn on the slice clicked.
        else if(courses_load_first_click == -1*courses_display_weight_base.length+2 ){
                courses_display_weight_color[courses_display_weight_base.indexOf(thiss.name)] = courses_display_weight_color_base[courses_display_weight_base.indexOf(thiss.name)];
                courses_display_weights[courses_display_weight_base.indexOf(thiss.name)] = thiss.name;
                chart_courses_load.series[0].data[courses_display_weight_base.indexOf(thiss.name)].update({color: courses_display_weight_color[courses_display_weight_base.indexOf(thiss.name)]});
        }
        else{
            if(courses_display_weight_color[courses_display_weight_base.indexOf(thiss.name)] != GREY) { //then it exists... -> grey it.
                courses_display_weight_color[courses_display_weight_base.indexOf(thiss.name)] = GREY;
                courses_display_weights[courses_display_weight_base.indexOf(thiss.name)] = 0;
                chart_courses_load.series[0].data[courses_display_weight_base.indexOf(thiss.name)].update({color: GREY});
            } else {
                courses_display_weight_color[courses_display_weight_base.indexOf(thiss.name)] = courses_display_weight_color_base[courses_display_weight_base.indexOf(thiss.name)];
                courses_display_weights[courses_display_weight_base.indexOf(thiss.name)] = courses_display_weight_base[courses_display_weight_base.indexOf(thiss.name)];
                chart_load.series[0].data[courses_display_weight_base.indexOf(thiss.name)].update({color: display_weight_color[courses_display_weight_base.indexOf(thiss.name)]});
            }
        }
    }

// load display
    courses_keep_load_static=true;
    var fixed=false;
    //Check whether any groups are disabled and if not disable all but the clicked segment.
    //alert("should be updating courses level");
    update_courses_level();
    if(courses_reset_load==true){
        update_chart_courses_load();
    }
    update_chart_courses_disc();
    update_chart_courses_tri();
    update_chart_courses_level();
    update_course_breakdown();
};


var courses_tri_flag;
var courses_tri_display_changed = function (ev, thiss,courses_tri_flag=0) {
    var tri_ind;
	var this_elem=thiss;
    //Check whether any groups are disabled and if not disable all but the clicked segment.
    courses_tri_first_click=true;
    courses_keep_disc_static=true;
	if(thiss==Admin_str || thiss==Research_str) return;
	
    if(courses_reset_tri==0) {
        for (tri_ind = 0; tri_ind < courses_display_tri_base_array.length; tri_ind++) {
            if (courses_display_tri_array[tri_ind] == 0) {
                courses_tri_first_click = courses_tri_first_click - 1;
            }
        }
        if (courses_tri_first_click == true) {
            for (tri_ind = 0; tri_ind < courses_display_tri_base_array.length; tri_ind++) {
                if (courses_display_tri_base_array.indexOf(this_elem) != tri_ind) {
                    courses_display_tri_color[tri_ind] = GREY;
                    courses_display_trimester[courses_display_tri_base_array[tri_ind]] = 0;
                    courses_display_tri_array[tri_ind] = 0;
                    chart_courses_tri.series[0].data[tri_ind].update({color: GREY});
                }
            }
        } else if (courses_tri_first_click == -1 * courses_display_tri_array.length + 2 && courses_display_tri_color[courses_display_tri_base_array.indexOf(this_elem)] != GREY) {
            //RESET all!!
            for (var i = 0; i < courses_display_tri_base_array.length; i++) {
                courses_display_tri_color[i] = courses_display_tri_color_base[i];
                courses_display_tri_array[i] = courses_display_tri_base_array[i];
                courses_display_trimester[courses_display_tri_base_array[i]] = courses_display_tri_base_array[i];
                chart_courses_tri.series[0].data[i].update({color: courses_display_tri_color[i]});
            }
        } else if (courses_tri_first_click == -1 * courses_display_tri_array.length + 2) {
            courses_display_tri_color[courses_display_tri_base_array.indexOf(this_elem)] = courses_display_tri_color_base[courses_display_tri_base_array.indexOf(this_elem)];
            courses_display_tri_array[courses_display_tri_base_array.indexOf(this_elem)] = this_elem;
            courses_display_trimester[this_elem] = this_elem;
            chart_courses_tri.series[0].data[courses_display_tri_base_array.indexOf(this_elem)].update({color: courses_display_tri_color[courses_display_tri_base_array.indexOf(this_elem)]});
        } else {
            if (courses_display_tri_color[courses_display_tri_base_array.indexOf(this_elem)] != GREY) { //then it exists... -> grey it.
                courses_display_tri_color[courses_display_tri_base_array.indexOf(this_elem)] = GREY;
                courses_display_trimester[this_elem] = 0;
                courses_display_tri_array[courses_display_tri_base_array.indexOf(this_elem)] = 0;
                chart_courses_tri.series[0].data[courses_display_tri_base_array.indexOf(this_elem)].update({color: GREY});
            } else {
                courses_display_tri_color[courses_display_tri_base_array.indexOf(this_elem)] = courses_display_tri_color_base[courses_display_tri_base_array.indexOf(this_elem)];
                courses_display_trimester[this_elem] = this_elem;
                courses_display_tri_array[courses_display_tri_base_array.indexOf(this_elem)] = this_elem;
                chart_courses_tri.series[0].data[courses_display_tri_base_array.indexOf(this_elem)].update({color: courses_display_tri_color[courses_display_tri_base_array.indexOf(this_elem)]});
            }
        }
    }
    update_courses_level();
    if(courses_reset_tri==true){
        update_chart_courses_tri();
    }
    update_chart_courses_disc();
    update_chart_courses_load();
    update_chart_courses_level();
    update_course_breakdown();
	
	
		if(courses_tri_flag==0){
	                   // var tmp={name: this_elem, visible: ev};
						    trimester_display_changed(ev, this_elem,1) ;
						}
};


var chart_level = new Highcharts.chart('courses_level_id', {
            chart: {
                type: 'bar',
                  marginTop: 0,
                  marginBottom: 0,
                  marginLeft: 0,
                  marginRight: 0,
                  plotBackgroundColor: '#f2f2f2',
                  plotBorderWidth: 0,
                  plotShadow: false,
                  backgroundColor:'rgba(255, 255, 255, 0)',
                  plotBackgroundColor: "#ffffff"

            },
            exporting: {
                buttons: {
                    contextButton: {
                        menuItems:  ['reset', "viewFullscreen", "printChart", "separator", "downloadPNG",  "downloadPDF", "downloadCSV","downloadXLS"]
                    }
                },
                menuItemDefinitions: {
                    reset: {
                        onclick: function (ev){
                          courses_reset_level=1;
                          for(i=0;i< courses_display_lev_base.length;i++){
                                        courses_display_lev_array[i] = courses_display_lev_base[i];
                                        display_lev_color[i]=display_lev_color_base[i];
                                        courses_display_lev[display_lev_color_base[i]]=display_lev_color_base[i];
                                        this.series[0].data[i].update({color: display_lev_color_base[i]});
                          }
                          courses_level_display_changed(ev, this);
                          courses_reset_level=0;
                        },
                        text: 'Reset'
                    }
                },
            },
            title: {
                text: ''
            },
            xAxis: {
                type: 'category',
                labels: {
                    style: {
                        fontSize: 6,
                        color: '#000000'
                    },
                },
                categories: ['100', '200', '300', '400', '500'],
                minTickInterval: 1,
                tickWidth: 0,
            },
        credits: {
        enabled: false
    },       legend: {
            enabled: false
        },
            yAxis: {
                min: 0,
                title: {
                    text: 'Total fruit consumption'
                },
                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                    }
                }
            },
            tooltip: {
                headerFormat: '<b>{point.x}</b><br/>',
                pointFormat: '{point.y}<br/>'
            },
            plotOptions: {
                bar: {

                    stacking: 'overlap',
                    dataLabels: {
                        enabled: true,
                        allowOverlap: true,
                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                        format: "{point.name}",
                        distance: -20
                    },
                    line: {
                        pointInterval: 86400000,
                        pointStart: 1282408923000
                    },
                          pointPadding: -.3,
                },
                allowPointSelect: false,
                series: {
                                        borderWidth: 1,
                    borderColor: 'black',
                   cursor: 'pointer',
                   point: {
                   events: {
                        click: function () {
                           // alert('Category: ' + this.category+  ', value: ' + this.y +" "+" "+ this.series);
                            courses_level_display_changed(event, this);
                        }
                    }
                   }
                }
            },
            series: [{
                    borderWidth: 1,
                    borderColor: 'black',
                data: [{y: 120, name:'100',color: display_lev_color[0] },{y: 20,name:'200',color:display_lev_color[1]},{y: 30,name:'300', color:display_lev_color[2]},{y: 40,name:'400',color:display_lev_color[3]},{y: 50,name:'500',color:display_lev_color[4]}],
            },]
        });


var chart_courses_disc = new Highcharts.chart('courses_disc_id', {
            chart: {
              plotBackgroundColor: null,
              plotBorderWidth: null,
              plotShadow: true,
              type: 'pie',
              marginTop: 0,
              marginBottom: 0,
              marginLeft: 0,
              marginRight: 0,
              plotBackgroundColor: '#f2f2f2',
              plotBorderWidth: 0,
              plotShadow: false,
              backgroundColor:'rgba(255, 255, 255, 0)',
              plotBackgroundColor: "#ffffff"
            },
            exporting: {
                buttons: {
                    contextButton: {
                        menuItems:  ['reset', "viewFullscreen", "printChart", "separator", "downloadPNG",  "downloadPDF", "downloadCSV","downloadXLS"]
                    }
                },
                menuItemDefinitions: {
                    reset: {
                        onclick: function (ev){
                          courses_reset_disc=1;
                          for(i=0;i< courses_display_group_array.length;i++){
                                      //  alert('HI EVERYONE...'+courses_display_group_array_base[i]);
                                        courses_display_group_array[i] = courses_display_group_array_base[i];
                                        courses_display_disc_color[i]= courses_display_disc_color_base[i];
                                        this.series[0].data[i].update({color: courses_display_disc_color_base[i]});
                          }
                          courses_disc_display_changed(ev, this.name);
                          courses_reset_disc=0;
                        },
                        text: 'Reset'
                    }
                },
            },
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            credits: {
                enabled: false
            },
            plotOptions: {
                pie: {
                    size: 200,
                    allowPointSelect: true,
                    slicedOffset: 0,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '{point.name}',
                        distance: -20
                    },
                      borderWidth: 0 // < set this option
                }, series: {
                    selected: true, point: {
                        events: {
                            click: function (event) {
                             //   alert(this.id);
                                this.slice(null);
								var name=this.name;
                                courses_disc_display_changed(event, name);
                            }
                        }
                    },
                }
            },

            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}</b> <br/>'
            },
            series: [{
                borderWidth: 1,
                borderColor: 'black',
                name: 'Discipline',
                data: [
                    {% for disc in discipline_set %} {
                        name: '{{ disc.name }}',
                        y: total_load_disc_sum['{{disc.name}}'],
                        color: display_disc_color_base[{{ loop.index-1 }}],
                    },
                    {% endfor %}
                ]
            }],
        });


var chart_courses_tri = new Highcharts.chart('courses_tri_id', {
            chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: true,
                type: 'pie',
                marginTop: 0,
                marginBottom: 0,
                marginLeft: 0,
                marginRight: 0,
                plotBackgroundColor: '#f2f2f2',
                plotBorderWidth: 0,
                plotShadow: false,
                backgroundColor:'rgba(255, 255, 255, 0)',plotBackgroundColor: "#ffffff"
            },
            exporting: {
                buttons: {
                    contextButton: {
                        menuItems:  ['reset', "viewFullscreen", "printChart", "separator", "downloadPNG",  "downloadPDF", "downloadCSV","downloadXLS"]
                    }
                },
                menuItemDefinitions: {
                    reset: {
                        onclick: function (ev){
                          courses_reset_tri=1;
                          for(i=0;i< courses_display_tri_base_array.length;i++){
                                        courses_display_tri_array[i] = courses_display_tri_base_array[i];
                                        courses_display_trimester[i]=courses_display_trimester_base[courses_display_tri_base_array[i]];
                                        courses_display_tri_color[i]=courses_display_tri_color_base[i];
                                        this.series[0].data[i].update({color: courses_display_tri_color_base[i]});
                          }
						   var vis='visible';						  
                           courses_tri_display_changed(vis, '1');  //CHANGE ME
                           courses_reset_tri=0;
                        },
                        text: 'Reset'
                    }
                },
            },
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
                credits: {
                enabled: false
            },
            plotOptions: {
                pie: {
                    size: 200,
                    allowPointSelect: true,
                    slicedOffset: 0,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '{point.name}: {point.y:.0f}',
                        distance: -20
                    },
                      borderWidth: 0 // < set this option
                }, series: {
                    selected: true,
                    point: {
                        events: {
                            click: function (event) {
							    var vis;
							    if(event.point.visible==true){
								   vis='visible';
								}
							    courses_tri_display_changed(vis, this.name); //change me
                            }
                        }
                    },
                }
            },

            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}</b> <br/>'
            },

            series: [{
                                    borderWidth: 1,
                    borderColor: 'black',
                name: 'trimester',
                data: [{
                    name: T1_str,
                    y: 0,
                    color: display_tri_color_base[0]
                }, {
                    name: T2_str,
                    y: 0,
                    color: display_tri_color_base[1]
                }, {
                    name: T3_str,
                    y: 0,
                    color: display_tri_color_base[2]
                }, {
                    name: 'F',
                    y: 0,
                    color: display_tri_color_base[3]
                }]
            }]

        });



var chart_courses_load = new Highcharts.chart('courses_load_id', {
		chart: {
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: true,
                type: 'bar',
                marginTop: 0,
                marginBottom: 0,
                marginLeft: 0,
                marginRight: 0,
                plotBackgroundColor: '#f2f2f2',
                plotBorderWidth: 0,
                plotShadow: false,
                backgroundColor:'rgba(255, 255, 255, 0)',
                plotBackgroundColor: "#ffffff"
            },
                credits: {
                enabled: false
            },
            exporting: {
			    enabled: true,
                buttons: {
                    contextButton: {
                        menuItems:  ['reset', "viewFullscreen", "printChart", "separator", "downloadPNG",  "downloadPDF", "downloadCSV","downloadXLS"]
                    }
                },
                menuItemDefinitions: {
                    reset: {
                        onclick: function (ev){
                          courses_reset_load=1;
                          for(i=0;i< display_weight_base.length;i++){
                                        courses_display_weight_color[i] = courses_display_weight_color_base[i];
                                        courses_display_group_array[i] = courses_display_group_array_base[i];
                                        courses_display_weights[i] =courses_display_weight_base[i];
                                        this.series[0].data[i].update({color: courses_display_weight_color_base[i]});
                          }
                          courses_load_display_changed(ev, this);
                          courses_reset_load=0;
                        },
                        text: 'Reset'
                    }
                },
            },

            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            plotOptions: {
                bar: {
				stacking: 'overlap',
                    dataLabels: {
                        enabled: true,
                        allowOverlap: true,
                        color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                        format: "{point.name}",
                        distance: -20
                    },
                    line: {
                        pointInterval: 86400000,
                        pointStart: 1282408923000
                    },
                          pointPadding: -.3,
                },
                  // < set this option

                allowPointSelect: false,
                series: {
				   pointWidth: 50,
                   borderWidth: 1,
                   borderColor: 'black',
                   cursor: 'pointer',
                   point: {
                   events: {
                        click: function () {
                           // alert('Category: ' + this.category+  ', value: ' + this.y +" "+" "+ this.series);
                            courses_load_display_changed(event, this);
                        }
                    }
                   }
                }
            },

            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}</b><br/>'
            },

            series: [{
                borderWidth: 1,
                borderColor: 'black',
                name: '',
                data: [{
                    name: 'Full',
                    y: 0,
                    color: courses_display_weight_color_base[0]
                }, {
                    name: 'Incomplete',
                    y: 0,
                    color: courses_display_weight_color_base[1]
                }, {
                    name: 'No_Coord',
                    y: 0,
                    color: courses_display_weight_color_base[2]
                }]
            }]
        });


var refresh_all=function(){
           // alert('Refreshing all figures...');
            for (var i = 0; i < courses_display_lev_array.length; i++) {
                courses_level_sum[courses_display_lev_array[i]] = [];
            }

            var temp = Object.keys(courses_display_trimester_base);
            for (var i = 0; i < temp.length; i++) {
                courses_tri[temp[i]] = 0;
            }

            for (var i = 0; i < display_groups.length; i++) {
                courses_disc[display_groups[i]] = 0;
            }

            //FIRST DISPLAY STAFF DISCIPLINE AND LOAD CHARTS
            var dummy_1;
            var dummy_2;
            update_display_data(dummy_1, dummy_2);
            update_chart_load(total_load_sum);
            update_chart_discipline(total_load_disc_sum);

            update_courses_level();
            chart_level.series[0].setData([level_sum['100'],level_sum['200'],level_sum['300'],level_sum['400'],level_sum['500']], true);
            update_chart_courses_disc();
            update_chart_courses_tri();
            update_chart_courses_load();
            update_course_breakdown();
};

//HOWDYPAR
var get_model= function (model_name) {
    model_group_workload=model_name;
    
	$.ajax({
        url: '{{ url_for(".admin_get_model", _external=True) }}',
        type: "POST",
        timeout: 30000,
        async: false,
        cache: false,
        data: { "Model_set_name": model_name,"year": YEAR, "csrf_token": "{{ csrf_token() }}"},
        success: function (result) {
		    //alert('finished');
            COURSE_HOURS = result.COURSE_HOURS_PER_COURSE;
            model_Hi_thresh =  result.HI_THRESH;
            model_Med_thresh=  result.MED_THRESH;
            model_local_group_workload = JSON.parse(JSON.stringify(result.model_group_workload)) ;
            model_display_local_group_workload = result.model_group_workload;
        },
          error: function(jqXHR, exception) {
            var msg = '';
            if (jqXHR.status === 0) {
                msg = 'Could not connect.\n Verify Network.';
            } else if (jqXHR.status == 404) {
                msg = 'Requested page not found. [404]';
            } else if (jqXHR.status == 403) {
                msg = 'Unauthorised access. [403]';
            } else if (jqXHR.status == 500) {
                msg = 'Internal Server Error [500].';
            } else if (exception === 'parsererror') {
                msg = 'Requested JSON parse failed.';
            } else if (exception === 'timeout') {
                msg = 'Time out error.';
            } else if (exception === 'abort') {
                msg = 'Ajax request aborted.';
            } else {
                msg = 'Uncaught Error.\n' + jqXHR.responseText;
            }
            alert(msg);
            return;
        }
    });
}

var view_staff= function (staff_name, discipline, year) {
    var disc = discipline;
    var assigned_courses=[];
    var admin_width;
    var research_width;
    var lab_hours;
    var model_work;
    var base_work;

    var h3_Notes_element=document.getElementById("Notes_id");
    var h3_FTE_element=document.getElementById("FTE_id");
    var h3_Buyout_element=document.getElementById("Buyout_id");
    var h3_Leave_element=document.getElementById("Leave_id");	
    var h3_Roles_element=document.getElementById("Role_id");

    var h3_Eff_FTE_element=document.getElementById("Eff_FTE_id");
    var h3_Exp_TH_element=document.getElementById("Exp_TH_id");
    var h3_Tot_W_element=document.getElementById("Total_work_id");
    var h3_Res_element=document.getElementById("Residual_id");
	var h3_base_work_element=document.getElementById("Total_id");
	h3_base_work_element.innerHTML="";

	var h3_edit_cs_notes=document.getElementById("edit_course_staff_details_notes_id");
	var h3_edit_cs_buy=document.getElementById("edit_course_staff_details_buyout_id");
	var h3_edit_cs_leave=document.getElementById("edit_course_staff_details_Leave_id");
	var h3_edit_cs_fte=document.getElementById("edit_course_staff_details_FTE_id");

    var img_element=document.getElementById("view_staff_image_id");

    $.ajax({
        url: '{{ url_for(".admin_view_staff", _external=True) }}',
        type: "POST",
        timeout: 30000,
        async: false,
        cache: false,
        data: {"staff_name": staff_name, "year": year, "csrf_token": "{{ csrf_token() }}"},
        success: function (result) {

            h3_Notes_element.innerHTML = result.notes;
            h3_FTE_element.innerHTML =   result.FTE;
            h3_Buyout_element.innerHTML = result.buyout;
            h3_Leave_element.innerHTML =  result.leave;
            h3_Eff_FTE_element.innerHTML= Number.parseFloat((result.FTE - result.leave - result.buyout)).toFixed(2) ;
            if(h3_Eff_FTE_element.innerHTML<0){
                alert("ERROR: This staff members FTE is less than 0! Please check consistency!!!");
                h3_Eff_FTE_element.innerHTML="NA (Check consitency)";
              //  return;
            }
            h3_Exp_TH_element.innerHTML= Number.parseFloat(Number.parseFloat((result.FTE - result.leave - result.buyout)).toFixed(2) - result.admin - result.research).toFixed(2) +'/'+Number.parseFloat((Number.parseFloat((result.FTE - result.leave - result.buyout)).toFixed(2) - result.admin - result.research)*FTE_HOURS).toFixed(2) ;
            if( Number.parseFloat(Number.parseFloat((result.FTE - result.leave - result.buyout)).toFixed(2) - result.admin - result.research).toFixed(2)<0){
                alert("ERROR: This staff members Expected Teaching Load is less than 0! Please check consistency!!!");
                h3_Exp_TH_element.innerHTML="NA (Check consitency)";
               // return;
            }
            tot=0;
            temp=Object.keys(result.work);
            for(i=0;i<temp.length;i++){
                tot=tot+result.work[temp[i]];
                h3_base_work_element.innerHTML=h3_base_work_element.innerHTML+" " +temp[i]+": " +result.work[temp[i]];
            }
            h3_base_work_element.innerHTML=h3_base_work_element.innerHTML+" ("+tot+")";

            if(Number.parseFloat((tot) / ( Number.parseFloat(h3_Eff_FTE_element.innerHTML - result.admin - result.research).toFixed(2)*FTE_HOURS) ).toFixed(2)<0){
                h3_Tot_W_element.innerHTML= 'NA (Check Consistency)';
            }else {
                h3_Tot_W_element.innerHTML= Number.parseFloat((tot) / ( Number.parseFloat(h3_Eff_FTE_element.innerHTML - result.admin - result.research).toFixed(2)*FTE_HOURS) ).toFixed(2).toString() ;
            }

            h3_Res_element.innerHTML=Number.parseFloat(( Number.parseFloat(h3_Eff_FTE_element.innerHTML - result.admin - result.research).toFixed(2))*FTE_HOURS-(tot) ).toFixed(2).toString();

            img_element.setAttribute('src', result.img_link);
			h3_Roles_element.innerHTML=  result.roles;
            lab_hours= result.lab_hours;//JSON.parse(result.lab_hours);
            model_work= result.model_work;
            base_work=result.work;
            disc = result.discipline;
            admin_width = result.admin;
            research_width = result.research;
			
			h3_edit_cs_notes.value=result.notes;
	        h3_edit_cs_buy.value=result.buy;
	        h3_edit_cs_leave=result.leave;
	        h3_edit_cs_fte=result.fte;
        },
          error: function(jqXHR, exception) {
            var msg = '';
            if (jqXHR.status === 0) {
                msg = 'Could not connect.\n Verify Network.';
            } else if (jqXHR.status == 404) {
                msg = 'Requested page not found. [404]';
            } else if (jqXHR.status == 403) {
                msg = 'Unauthorised access. [403]';
            } else if (jqXHR.status == 500) {
                msg = 'Internal Server Error [500].';
            } else if (exception === 'parsererror') {
                msg = 'Requested JSON parse failed.';
            } else if (exception === 'timeout') {
                msg = 'Time out error.';
            } else if (exception === 'abort') {
                msg = 'Ajax request aborted.';
            } else {
                msg = 'Uncaught Error.\n' + jqXHR.responseText;
            }
            alert(msg);
            return;
        }
    });

    ////Unhide the panel.
    var elem=document.getElementById("staff-details");
    elem.removeAttribute('style');

    //Copy the lectureing set from the staff box.
    var lecture_svg = document.getElementById("lecture-set_id");
    while (lecture_svg.firstChild) {
    lecture_svg.removeChild(lecture_svg.firstChild);
    }

    //Create admin and Research bars.
    //USE THE . Strictly this should retrieve the list of courses from a backend query...
    var work_sum=0;
    var canon_staff_name=staff_name.replace('_',' ');
    var tri_set=Object.keys(group_set_base[discipline][canon_staff_name]);
    var ind=0;
    for (var i = 0; i < tri_set.length; i++) {
        var temp=group_set_base[discipline][canon_staff_name][tri_set[i]];
        for(var j=0;j<temp.length;j++ ){
            var t = document.createElementNS("http://www.w3.org/2000/svg", "rect");     //CREATE A RECT
            t.classList.add("bar");
            t.style = "float: left; fill: rgb(128,128,128); ";
            t.setAttribute("y",55 * ind );
            t.setAttribute("height",30 );
            t.setAttribute("width",300 );

            var t2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");     //CREATE A coloured RECT
            t2.classList.add("bar");
            //t2.style = "float: left; height: 30; width:"+ group_course_set_base[discipline][canon_staff_name][tri_set[i]][j]*200+" ;fill:  "+display_tri_color_base[display_trimester_base_array.indexOf(tri_set[i])] +';';
            t2.style = "float: left;  fill:  "+display_tri_color_base[display_trimester_base_array.indexOf(tri_set[i])] +';';
            t2.setAttribute("y",55 * ind );
            t2.setAttribute("height",30 );
            t2.setAttribute("width", group_course_set_base[discipline][canon_staff_name][tri_set[i]][j]*300);
            t2.setAttribute("fill",  display_tri_color_base[display_trimester_base_array.indexOf(tri_set[i])] );

            var text = document.createElementNS("http://www.w3.org/2000/svg", "text");
            text.setAttribute('x', 5);
            text.setAttribute('y', 24+55 * ind );
            text.setAttribute('y', 24+55 * ind );
            text.setAttribute('width', 10);
            text.setAttribute('height', 30);
            text.setAttribute('style', "font-size:25px");
            text.innerHTML = group_set_base[disc][canon_staff_name][tri_set[i]][j];
            text.classList.add("label");
            work_sum = work_sum + model_work['text.innerHTML'];//parseFloat(group_course_set_base[disc][canon_staff_name][tri_set[i]][j]);   model_work[assigned_courses[j]]
            assigned_courses.push(text.innerHTML);
            lecture_svg.appendChild(t);
            lecture_svg.appendChild(t2);
            lecture_svg.appendChild(text);
            ind=ind+1;
        }
    }

    //var img_link;

    //SET THE ASSIGNMENT OF STAFF TAGS SPECIFIC TO THE STATED USER.
    var h3_Hidden1_element=document.getElementById("view_staff_assign_year_id");
        h3_Hidden1_element.setAttribute('value', year );

    var h3_Hidden2_element=document.getElementById("view_staff_assign_staff_name_id");
        h3_Hidden2_element.setAttribute('value', staff_name.replace('_',' '));

        h3_Hidden2_element=document.getElementById("view_staff_edit_staff_name_id");
        h3_Hidden2_element.setAttribute('value', staff_name.replace('_',' '));

        h3_Hidden2_element=document.getElementById("view_staff_edit_course_staff_details_name_id");
        h3_Hidden2_element.setAttribute('value', staff_name.replace('_',' '));

        h3_Hidden1_element=document.getElementById("view_staff_del_year_id");
        h3_Hidden1_element.setAttribute('value', year );

        h3_Hidden2_element=document.getElementById("view_staff_del_staff_name_id");
        h3_Hidden2_element.setAttribute('value', staff_name.replace('_',' '));
		
    var lab_hour_element=document.getElementById("Lab_hours_staff_id");
    var model_work_element=document.getElementById("Model_work_staff_id");

    var fte_element=document.getElementById("edit_course_staff_details_FTE_id");
    fte_element.value=h3_FTE_element.innerHTML;
    var buyout_element=document.getElementById("edit_course_staff_details_buyout_id");
    buyout_element.value=h3_Buyout_element.innerHTML;
    var leave_element=document.getElementById("edit_course_staff_details_leave_id");
    leave_element.value=h3_Leave_element.innerHTML;

    //set total work_sum
    //work_sum=parseFloat(work_sum)+parseFloat(admin_width)+parseFloat(research_width);
    //var h3_Total_element=document.getElementById("Total_id");
    //    h3_Total_element.innerHTML=parseFloat(work_sum);

    var svg_element=document.getElementById("research-set_id");
    var child=svg_element.children;

    child[0].setAttribute("width",  300);
    child[1].setAttribute("width",  300);
    child[4].setAttribute("width", parseFloat(admin_width, 10) * 300);
    child[3].setAttribute("width", parseFloat(research_width, 10) * 300);

    child[6].setAttribute('style', "font-size:25px");
    child[5].setAttribute('style', "font-size:25px");

    //create editable parameters...
    var course_select  =document.getElementById('view_staff_assign_select_id');
    var course_list = [];
    var disc_list = Object.keys(local_course_set);
    for (var k = 0; k < disc_list.length; k++) {
            var tri_list = Object.keys(local_course_set[disc_list[k]]);
            for (var i = 0; i < tri_list.length; i++) {
                    var lev_list = Object.keys(local_course_set[disc_list[k]][tri_list[i]]);
                    for (var j = 0; j < lev_list.length; j++) {
                        var c_set = Object.keys(local_course_set[disc_list[k]][tri_list[i]][lev_list[j]]);
                        for (var z = 0; z < c_set.length; z++) {
                            course_list.push(c_set[z]);
                        }
                    }
                }
    }

    course_list=course_list.sort();
    for(j=0;j<course_list.length;j++){
              var temp=createElement('option','text', "'"+course_list[j]+"'",'value',"'"+course_list[j]+"'" );
              temp.innerHTML=course_list[j];
              course_select.add(temp);
    }

    var edit_drop  =document.getElementById('view_staff_edit_select_id');
    while (edit_drop.firstChild) {
    edit_drop.removeChild(edit_drop.firstChild);
    }

    var del_drop  =document.getElementById('view_staff_del_select_id');
    while (del_drop.firstChild) {
    del_drop.removeChild(del_drop.firstChild);
    }

    var lab_hour_element=document.getElementById("Lab_hours_staff_id");
    lab_hour_element.innerHTML=""
    for(var j=0;j<assigned_courses.length;j++){
              lab_hour_element.innerHTML=lab_hour_element.innerHTML+assigned_courses[j]+": "+lab_hours[assigned_courses[j]] +"   ;   ";
    }
	
	var admin_element=document.getElementById("Administration_staff_id");
    admin_element.innerHTML=admin_width+"/"+admin_width * FTE_HOURS +'hours'
	
	var research_element=document.getElementById("Research_staff_id");
    research_element.innerHTML=research_width+"/"+ research_width * FTE_HOURS +'hours';

    model_work_element.innerHTML=""
    var model_work_element=document.getElementById("Model_work_staff_id");
    for(var j=0;j<assigned_courses.length;j++){
              model_work_element.innerHTML=model_work_element.innerHTML+assigned_courses[j]+": "+model_work[assigned_courses[j]] +"   ;   ";
    }

    assigned_courses.push("Admin");
    assigned_courses.push("Research");
    for(var j=0;j<assigned_courses.length;j++){
              var temp=createElement('option','text', "'"+assigned_courses[j]+"'",'value',"'"+assigned_courses[j]+"'" );
              temp.innerHTML=assigned_courses[j];
              var temp2=temp.cloneNode(temp, false);
              edit_drop.add(temp);
              del_drop.add(temp2);
    }
};

var edit_staff_course= function (staff_name, year ) {
      var staff_name_c=staff_name;
      var course_select  =document.getElementById('edit_course_select_id');
      var course_sel=$( "#edit_course_select_id" ).val();
      var workload  =document.getElementById('edit_wl_range_id').value;
      var coord  =document.getElementById('edit_coord_cb_id').checked;
      var discipline;
      document.getElementById("edit_staff_form_id").submit();
};

var view_spreadsheets= function () {
    var elem = document.getElementById("Course_td_id");
    var disc_set = Object.keys(local_course_set);
    for (var disc_ind = 0; disc_ind < disc_set.length; disc_ind++) {
        var tri_set = Object.keys(local_course_set[disc_set[disc_ind]]);
        for (var tri_ind = 0; tri_ind < local_course_set[disc_set[disc_ind]][tri_set[tri_ind]].length; tri_ind++) {
            var lev_set = Object.keys(local_course_set[disc_set[disc_ind]][tri_set[tri_ind]]);

            for (var lev_ind = 0; lev_ind < local_course_set[disc_set[disc_ind]][tri_set[tri_ind]].length; lev_ind++) {
                var course_names = Object.keys(local_course_set[disc_set[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]]);
                for (var course_ind = 0; course_ind < courses_display_lev_array.length; course_ind++) {
                    var lect_sets = Object.keys(local_course_set[disc_set[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]][course_names[course_ind]]['lect']);
                    for (var j = 0; j < lect_set.length; j++) {
                        elem = getElementById("Course_td_id");
                    }
                }
            }

        }
    };
};


var createElement = function () {
  var el = document.createElement(arguments[0]);
  for (var i=1;i<arguments.length ;i=i+2){
     if(arguments[i]!==undefined) {
        el.setAttribute(arguments[i], arguments[i+1]);
    }
  };
  return el;
}

//TABLE EXPORTING...
//$("#tableExport_id").click(function() {
//  $("#Export_course_id").tableExport({type:'csv',escape:'false'});
//});


var view_course= function (course_name, trimester,discipline) {
    var disc = discipline;
    var assigned_courses = [];
//Unhide the panel...
   // alert("course_name: " + course_name + " " + discipline + " " + trimester);

    var elem = document.getElementById("course-details");
    elem.removeAttribute('style');

    var lecture_svg = document.getElementById("course_lecturer-set_id");
    while (lecture_svg.firstChild) {
        lecture_svg.removeChild(lecture_svg.firstChild);
    }
    var assign_select_elem = document.getElementById("view_course_assign_select_id");
    var edit_select_elem = document.getElementById("view_course_edit_select_id");

    //set the coursename
    var add_element = document.getElementById("view_course_add_course_name_id");
    var edit_element = document.getElementById("view_course_edit_course_name_id");
    var edit_detail_element = document.getElementById("view_staff_edit_course_details_name_id");
    var del_element = document.getElementById("view_course_del_course_name_id");
    add_element.setAttribute('value', course_name);
    edit_element.setAttribute('value', course_name);
    del_element.setAttribute('value', course_name);
    edit_detail_element.setAttribute('value', course_name);

    var tri_element = document.getElementById('cd_tri_id');
    tri_element.innerText='Trimester:   '+ trimester;

    var work_sum = 0;
    var assigned_staff = [];

    var lev = course_name.replace(/[A-Z]/gi, '');
    lev = lev[0] + "0" + "0";
    var ind = 0;
    //alert("local_course_set: " + disc + " " + trimester + " " + lev + " " + course_name)
	
	var temp = Object.keys(local_course_set[disc][trimester][lev][course_name]['lect']);
		for (var j = 0; j < temp.length; j++) {
			var t = document.createElementNS("http://www.w3.org/2000/svg", "rect");     //CREATE A RECT
			t.classList.add("bar");
			t.style = "float: left; height: 30; width:400 ;fill: rgb(128,128,128); ";
			t.setAttribute("y", 55 * ind);
			t.setAttribute("height",30 );
			t.setAttribute("width",300 );
			
			var t2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");     //CREATE A coloured RECT
			t2.classList.add("bar");
			t2.style = "float: left; height: 30; width:" + local_course_set[disc][trimester][lev][course_name]['lect'][temp[j]] * 400 + " ;fill:  " + display_tri_color_base[display_trimester_base_array.indexOf(trimester)] + ';';
			t2.setAttribute("y", 55 * ind);
			t2.setAttribute("height",30 );
			var canon_staff_name=temp[j].replace('_',' ');
			t2.setAttribute("width", local_course_set[disc][trimester][lev][course_name]['lect'][canon_staff_name]*400);
			t2.setAttribute("fill",  display_tri_color_base[display_trimester_base_array.indexOf(trimester)] );

			var text = document.createElementNS("http://www.w3.org/2000/svg", "text");
			text.setAttribute('x', 5);
			text.setAttribute('y', 24 + 55 * ind);
			
			text.setAttribute('font-size', "25px");
			text.innerHTML = temp[j];//local_course_set[disc][trimester][lev][course_name]['lect'][temp[j]];
		  //  text.classList.add("label");
			work_sum = work_sum + parseFloat(local_course_set[disc][trimester][lev][course_name]['lect'][temp[j]]);
			assigned_staff.push(text.innerHTML);
			lecture_svg.appendChild(t);
			lecture_svg.appendChild(t2);
			lecture_svg.appendChild(text);
			//Add option labels...
			ind = ind + 1;
		}

    var Title_elem = document.getElementById("Title_id");
    var Code_elem = document.getElementById("Code_id");
    var exp_stud_elem = document.getElementById("cd_exp_stud_id");
    //var notes_elem = document.getElementById("cd_notes_id");
    var coord_elem = document.getElementById("cd_coord_id");
    var tot_work_elem = document.getElementById("cd_ass_id");
    tot_work_elem.innerText = work_sum;
    var duration_elem = document.getElementById("cd_dur_id");
    var num_lect_elem = document.getElementById("cd_num_lect_id");
    var lab_hours_elem= document.getElementById("cd_lab_hours_id");
    var total_lab_hours_elem= document.getElementById("cd_total_lab_hours_id");
    var stud_fact_elem= document.getElementById("cd_stud_fact_id");
	var status_elem= document.getElementById("cd_status_id");

    var Lab_Hours;
    var staff_set;
    var discipline;

    $.ajax({
        url: '{{ url_for(".admin_view_course", _external=True) }}',
        type: "POST",
        timeout: 30000,
        async: false,
        cache: false,
        data: {"course_name": course_name, "year": YEAR, "csrf_token": "{{ csrf_token() }}"},
        success: function (result) {
            exp_stud_elem.innerText = result.students;
          //  notes_elem.innerText = result.notes;
			status_elem.innerText=result.course_status;
            coord_elem.innerText = result.coord;
            Title_elem.innerText = result.title;
            Code_elem.innerText = course_name;
            duration_elem.innerText=result.duration;
            num_lect_elem.innerText=result.lectures_week;
            stud_fact_elem.innerText=result.student_factor;
            total_lab_hours_elem.innerText=result.total_lab_hours;
           // staff_set=result.lecturers; Tkane care of
            Lab_Hours=result.lab_hours;
          //  alert("JAVASCRIPT: "+result.staff_lab_hours+ " "+result.lectures_week+" "+ result.duration +" "+course_name)
        },
         error: function(jqXHR, exception) {
            var msg = '';
            if (jqXHR.status === 0) {
                msg = 'Not connect.\n Verify Network.';
            } else if (jqXHR.status == 403) {
                msg = 'Unauthorised access. [403]';
            }else if (jqXHR.status == 404) {
                msg = 'Requested page not found. [404]';
            } else if (jqXHR.status == 500) {
                msg = 'Internal Server Error [500].';
            } else if (exception === 'parsererror') {
                msg = 'Requested JSON parse failed.';
            } else if (exception === 'timeout') {
                msg = 'Time out error.';
            } else if (exception === 'abort') {
                msg = 'Ajax request aborted.';
            } else {
                msg = 'Uncaught Error.\n' + jqXHR.responseText;
            }
            alert(msg);
            return;
        }


    });

    //tot_work_elem=
    var disc_list = Object.keys(local_group_workload);
    var staff_select = document.getElementById("view_course_assign_select_id");
    var staff_list_total = [];
    for (i = 0; i < disc_list.length; i++) {
        var staff_list = Object.keys(local_group_workload[disc_list[i]]);
        for (j = 0; j < staff_list.length; j++) {
            staff_list_total.push(staff_list[j])
        }
    }

    staff_list_total = staff_list_total.sort();
    for (j = 0; j < staff_list_total.length; j++) {
        var temp = createElement('option', 'text', "'" + staff_list_total[j] + "'", 'value', "'" + staff_list_total[j] + "'");
        temp.innerHTML = staff_list_total[j];
        staff_select.add(temp);
    }

    var edit_drop = document.getElementById('view_course_edit_select_id');
    while (edit_drop.firstChild) {
        edit_drop.removeChild(edit_drop.firstChild);
    }
    var del_drop = document.getElementById('view_course_del_select_id');
    while (del_drop.firstChild) {
        del_drop.removeChild(del_drop.firstChild);
    }

    //lab_hours_elem.innerText="Lab Hours per staff:  "
    var l_hours_txt=""
    for (var j = 0; j < assigned_staff.length; j++) {
        var temp = createElement('option', 'text', "'" + assigned_staff[j] + "'", 'value', "'" + assigned_staff[j] + "'");
        temp.innerHTML = assigned_staff[j];
        l_hours_txt=l_hours_txt+assigned_staff[j]+": "+Lab_Hours[j]+ " , ";
        var temp2 = temp.cloneNode(temp, false);
        edit_drop.add(temp);
        del_drop.add(temp2);
    }
    lab_hours_elem.innerText=l_hours_txt;

};




$('#view_log_button_id').click(function(){
	var max_entries=$('#max_entries_id').val() 
	var hi_bound=$('#hi_bound_id').val()
	var low_bound=$('#low_bound_id').val()
	var log_entry=$('#logfile_select_id').val()
	var spec=$('#spec_select_id').val()
	$.ajax({
			url: '{{ url_for(".admin_view_log", _external=True) }}',
			type: "POST",
			timeout: 30000,
			
			cache: false,
			data: {"max_entries": max_entries,  'spec':spec, "year": YEAR,"hi_bound": hi_bound , "low_bound": low_bound,'log_entry': log_entry ,"csrf_token": "{{ csrf_token() }}"},
			success: function (result, result2) {
			
				var temp=document.getElementById('log_set_id');
				while (temp.firstChild) {
					temp.removeChild(temp.childNodes[0]);   
   			    }
				
				var set_hdr=document.createElement('tr');
				//var temp=document.getElementById('log_hdr_id');
				for(key in result.set_hdr){
				    var hdr=document.createElement('th');
					hdr.style.wordWrap='break-word';
					var hdr_label=document.createElement('h5');
					//opt.value = result.set[key]; 
					hdr_label.innerHTML = result.set_hdr[key]; 
					hdr.appendChild(hdr_label);
					temp.appendChild(hdr);
				} 
				var temp=document.getElementById('log_set_id');
				for(key in result.set){
				   var hdr2=document.createElement('tr');				   
				   for(i=0; i<result.set[key].length;i++){
					    var td=document.createElement('td');
						td.style.wordWrap='break-word';
						td.innerHTML=result.set[key][i];
						hdr2.appendChild(td);
				   }
				}
				temp.appendChild(hdr2);
			},
			 error: function(jqXHR, exception) {
				var msg = '';
				if (jqXHR.status === 0) {
					msg = 'Not connect.\n Verify Network.';
				} else if (jqXHR.status == 403) {
					msg = 'Unauthorised access. [403]';
				}else if (jqXHR.status == 404) {
					msg = 'Requested page not found. [404]';
				} else if (jqXHR.status == 500) {
					msg = 'Internal Server Error [500].';
				} else if (exception === 'parsererror') {
					msg = 'Requested JSON parse failed.';
				} else if (exception === 'timeout') {
					msg = 'Time out error.';
				} else if (exception === 'abort') {
					msg = 'Ajax request aborted.';
				} else {
					msg = 'Uncaught Error.\n' + jqXHR.responseText;
				}
				return;
			}
	});
});

//var view_course= function (course_name, trimester,discipline) {
$("#logfile_select_id").on('change', function() {
//var change_fcn= function(){
	$.ajax({
				url: '{{ url_for(".admin_get_list", _external=True) }}',
				type: "POST",
				timeout: 30000,
				cache: false,
				data: {"year": YEAR, 'log_entry': this.value ,"csrf_token": "{{ csrf_token() }}"},
				success: function (result) {
					var temp=document.getElementById('spec_select_id');
					while (temp.firstChild) {
						temp.removeChild(temp.childNodes[0]);
					}					
					for(key in result.set){
					    var opt = document.createElement('option');
						opt.value = result.set[key]; 
						opt.innerHTML = result.set[key]; 
						temp.appendChild(opt);
					}
				},
				 error: function(jqXHR, exception) {
					var msg = '';
					if (jqXHR.status === 0) {
						msg = 'Not connect.\n Verify Network.';
					} else if (jqXHR.status == 403) {
						msg = 'Unauthorised access. [403]';
					}else if (jqXHR.status == 404) {
						msg = 'Requested page not found. [404]';
					} else if (jqXHR.status == 500) {
						msg = 'Internal Server Error [500].';
					} else if (exception === 'parsererror') {
						msg = 'Requested JSON parse failed.';
					} else if (exception === 'timeout') {
						msg = 'Time out error.';
					} else if (exception === 'abort') {
						msg = 'Ajax request aborted.';
					} else {
						msg = 'Uncaught Error.\n' + jqXHR.responseText;
					}
					return;
				}
	});
});


//var model_clicked=document.getElementById('')
//$('.clickable_text').click(function(){
var change_model_set_fcn=function(model_set_entity) {
	var elem = document.getElementById("table_model_set_description_id");
	var name_elem = document.getElementById("model_set_name_text_id");
	var low_bound = document.getElementById("model_low_thresh_id");
    var hi_bound = document.getElementById("model_hi_thresh_id");

    	//local_model_set_thresh
	while (elem.childNodes.length > 2) {
			elem.removeChild(elem.lastChild);
	}

	var models=local_model_map[model_set_entity];
		for(i=0;i<models.length;i++){
			var td = document.createElement('td');
			var span = document.createElement('span');
			span.innerHTML = models[i];
			//opt.setAttribute('font-size', "20px");
			span.setAttribute('style', 'color: blue; font-size:20px');
			span.setAttribute('onclick', "change_model_fcn('"+model_set_entity+"','"+models[i]+"');");
			
			var td2 = document.createElement('td');
			var span2 = document.createElement('span');
			span2.setAttribute('style', 'font-size:20px');
			span2.innerHTML = local_model_description[model_set_entity][models[i]];
			
			var td3 = document.createElement('td');
			var span3 = document.createElement('span');
			span3.setAttribute('style', 'font-size:20px');
			span3.innerHTML = local_model_type[model_set_entity][models[i]] +' ('+local_model_type_details[model_set_entity][models[i]]+')' ;
			
			td.appendChild(span);
			td2.appendChild(span2);
			td3.appendChild(span3);
			elem.appendChild(td);
			elem.appendChild(td2);
			elem.appendChild(td3);

			elem2 = document.createElement('tr');
			elem.appendChild(elem2);	
		}
	name_elem.value=model_set_entity;
	low_bound.innerHTML="Low Thresh:    "+local_model_set_thresh[model_set_entity]['low_thresh'];
	hi_bound.innerHTML="Hi Thresh:    "+local_model_set_thresh[model_set_entity]['hi_thresh'];
};



var applicability_change_fcn=function() {
	var temp=document.getElementById('applicability_select_id');
	var temp2=document.getElementById('applicability_attr_id');
	while (temp2.firstChild) {
		temp2.removeChild(temp2.firstChild);
    }
    var selected = temp.options[temp.selectedIndex].value;

	if(selected=="Course_Model"){
		for(var disc_ind=0;disc_ind<courses_display_group_array_base.length;disc_ind++) {
				var tri_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]]);
				for (var tri_ind = 0; tri_ind < tri_set.length; tri_ind++) {
						var lev_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]]);
						for (var lev_ind = 0; lev_ind < lev_set.length; lev_ind++) {
								var crs_set = Object.keys(local_course_set[courses_display_group_array_base[disc_ind]][tri_set[tri_ind]][lev_set[lev_ind]]);
								for (var crs_ind = 0; crs_ind < crs_set.length; crs_ind++) {
									var option = document.createElement("option");
									option.text = crs_set[crs_ind] ;
									temp2.add(option);
								}
						}
				}
		}
    }else if(selected=="Discipline_Model"){
		for(var disc_ind=0;disc_ind<courses_display_group_array_base.length;disc_ind++) {
									var option = document.createElement("option");
									option.text = courses_display_group_array_base[disc_ind] ;
									temp2.add(option);
						}
	}
	else if(selected=="Level_Model"){
		for(var level_ind=0;level_ind<courses_display_lev_base.length;level_ind++) {
			var option = document.createElement("option");
			option.text = courses_display_lev_base[level_ind] ;
			temp2.add(option);
		}
	}else if(selected=="Discipline-Level_Model"){
	   for(var disc_ind=0;disc_ind<courses_display_group_array_base.length;disc_ind++) {
			for(var level_ind=0;level_ind<courses_display_lev_base.length;level_ind++) {
				var option = document.createElement("option");
				option.text =  courses_display_group_array_base[disc_ind] +" - " +courses_display_lev_base[level_ind]
				temp2.add(option);
			}
		}
	}              

}

var operation_change_fcn=function(){
    var temp=document.getElementById('operation_select_id');
    var selected = temp.options[temp.selectedIndex].value;
	
    var model_set_name_elem = document.getElementById("model_set_name_text_id");
    var model_name_elem = document.getElementById("model_name_text_id");
	var model_low_elem = document.getElementById("low_bound_edit_id");
	var model_hi_elem = document.getElementById("hi_bound_edit_id");
	var model_applic_attr_elem= document.getElementById("applicability_attr_id")
	var model_applic_select_elem= document.getElementById("applicability_select_id")
	var model_eq_elem= document.getElementById("model_equation_text_id")
	
	if(selected=="Add_Model_Set" ){
		model_set_name_elem.disabled=false;
		model_name_elem.disabled=true
		model_name_elem.innerHTML="default";
		model_low_elem.disabled=false
		model_hi_elem.disabled=false
		model_applic_attr_elem.disabled=true
		model_applic_select_elem.disabled=true
		model_eq_elem.disabled=true
    }else if(selected=="Del_Model_Set" ){
		model_set_name_elem.disabled=false;
		model_name_elem.disabled=true
		model_low_elem.disabled=true
		model_hi_elem.disabled=true
		model_applic_attr_elem.disabled=true
		model_applic_select_elem.disabled=true
		model_eq_elem.disabled=true
	}else if(selected=="Del_Model" ){
		model_set_name_elem.disabled=false;
		model_name_elem.disabled=false
		model_low_elem.disabled=true
		model_hi_elem.disabled=true
		model_applic_attr_elem.disabled=true
		model_applic_select_elem.disabled=true
		model_eq_elem.disabled=true
	}else if(selected=="Add_Model" ){	
		model_set_name_elem.disabled=false;
		model_name_elem.disabled=false
		model_low_elem.disabled=true
		model_hi_elem.disabled=true
		model_applic_attr_elem.disabled=false
		model_applic_select_elem.disabled=false
		model_eq_elem.disabled=false
	}else if(selected=="Edit_Model" ){
		model_set_name_elem.disabled=false;
		model_name_elem.disabled=false
		model_low_elem.disabled=true
		model_hi_elem.disabled=true
		model_applic_attr_elem.disabled=false
		model_applic_select_elem.disabled=false
		model_eq_elem.disabled=false
	}
}




var change_model_fcn=function(updated_model, model_i) {

	var model_elem = document.getElementById("model_id");
	var model_current_elem = document.getElementById("model_current_id");
	var model_details_elem = document.getElementById("model_type_id");


	model_current_elem.innerHTML = local_model_description[updated_model][model_i];
    model_details_elem.innerHTML = local_model_type[updated_model][model_i] +" " + local_model_type_details[updated_model][model_i];
	
	var model_name_elem = document.getElementById("model_name_text_id");
	model_name_elem.value=updated_model;

	var model_equation_elem = document.getElementById("model_equation_text_id");
	model_equation_elem.value=local_model_description[updated_model][model_i];



  
//	model_equation_elem.value=local_model_description[updated_model][model_i];model_current_id

	
	
//	model_elem.innerHTML = models[i];
//	var opt2 = document.createElement('td');
//	opt2.innerHTML = local_model_description[models[i]];
//	elem.appendChild(opt);
//	elem.appendChild(opt2);
};




	
$(function () {
				$('.datepicker').datepicker({
								dateFormat: "dd/mm/yy"
				});
 });
 
</script>


{% endblock %}
